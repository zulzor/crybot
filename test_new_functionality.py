#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –¥–ª—è –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
"""
import sys
import os
import time
from unittest.mock import Mock, patch

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_role_system():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π...")
    
    try:
        # –ú–æ–∫–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        with patch.dict(os.environ, {
            'VK_GROUP_TOKEN': 'test_token',
            'VK_GROUP_ID': '123456789',
            'ADMIN_USER_IDS': '12345,67890'
        }):
            from admin import get_user_role, has_privilege, can_manage_roles, can_view_stats
            from bot_vk import UserRole
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏
            role = get_user_role(12345)
            print(f"‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 12345: {role}")
            
            # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π
            has_edit = has_privilege(12345, "edit_content")
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 12345 –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç: {has_edit}")
            
            can_manage = can_manage_roles(12345)
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 12345 –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–æ–ª—è–º–∏: {can_manage}")
            
            can_stats = can_view_stats(12345)
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 12345 –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {can_stats}")
            
            return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π: {e}")
        return False

def test_storage_functions():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π —Ö—Ä–∞–Ω–∏–ª–∏—â–∞...")
    
    try:
        from storage import update_user_activity, get_user_profile, set_user_profile
        
        user_id = 12345
        
        # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        update_user_activity(user_id)
        print("‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        profile = get_user_profile(user_id)
        print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω: {profile is not None}")
        
        # –¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
        test_profile = {"name": "Test User", "level": 1}
        set_user_profile(user_id, test_profile)
        print("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {e}")
        return False

def test_monitoring_functions():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
    
    try:
        from monitoring import health_checker
        
        # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
        health_status = health_checker.check_health()
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è –ø–æ–ª—É—á–µ–Ω: {len(health_status)} —Å–µ—Ä–≤–∏—Å–æ–≤")
        
        # –¢–µ—Å—Ç –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        overall_status = health_checker.get_overall_status()
        print(f"‚úÖ –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {overall_status}")
        
        # –¢–µ—Å—Ç –º–µ—Ç—Ä–∏–∫ –∫–µ—à–∞
        cache_hit_rate = health_checker._calculate_cache_hit_rate()
        print(f"‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫–µ—à: {cache_hit_rate}%")
        
        # –¢–µ—Å—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        active_users = health_checker._get_active_users_count()
        print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        return False

def test_cache_monitoring():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    try:
        from cache_monitoring import cache_manager
        
        # –¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–µ—à
        cache_manager.set("test_key", "test_value", ttl=60)
        print("‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –∫–µ—à")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–µ—à–∞
        value = cache_manager.get("test_key")
        print(f"‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏–∑ –∫–µ—à–∞: {value}")
        
        # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à–∞
        stats = cache_manager.get_stats()
        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞: {stats}")
        
        # –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞
        cache_manager.clear()
        print("‚úÖ –ö–µ—à –æ—á–∏—â–µ–Ω")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def test_new_commands():
    """–¢–µ—Å—Ç –Ω–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥...")
    
    try:
        from commands.router import _handle_role_info, _handle_role_list, _handle_stats, _handle_health
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        mock_ctx = Mock()
        mock_ctx.user_id = 12345
        mock_ctx.text = ""
        
        # –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–æ–ª–∏
        role_info = _handle_role_info(mock_ctx)
        print(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ /role info —Ä–∞–±–æ—Ç–∞–µ—Ç: {role_info is not None}")
        
        # –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã —Å–ø–∏—Å–∫–∞ —Ä–æ–ª–µ–π
        role_list = _handle_role_list(mock_ctx)
        print(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ /role list —Ä–∞–±–æ—Ç–∞–µ—Ç: {role_list is not None}")
        
        # –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∞–≤)
        stats_result = _handle_stats(mock_ctx)
        print(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ /stats –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞: {stats_result is not None}")
        
        # –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã –∑–¥–æ—Ä–æ–≤—å—è (–¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∞–≤)
        health_result = _handle_health(mock_ctx)
        print(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ /health –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞: {health_result is not None}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∫–æ–º–∞–Ω–¥: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...\n")
    
    tests = [
        test_role_system,
        test_storage_functions,
        test_monitoring_functions,
        test_cache_monitoring,
        test_new_commands
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
            print()
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {e}\n")
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        return 1

if __name__ == "__main__":
    exit(main())