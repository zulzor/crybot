.PHONY: help install run test clean docker-build docker-run docker-stop format lint setup dev install-dev

help: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
	@echo "üöÄ CryCat Bot v2.0.0 - –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'

install: ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å production –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	pip install -r requirements.txt

install-dev: ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å development –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	pip install -r requirements.txt
	pip install -e .[dev]

run: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
	python bot_vk.py

run-dev: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	python -m uvicorn webhook:app --reload --host 0.0.0.0 --port 8080

test: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã
	python tests.py

test-pytest: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã —Å pytest
	python -m pytest tests.py -v --cov=. --cov-report=html --cov-report=term-missing

test-modules: ## –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
	@echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –º–æ–¥—É–ª—è..."
	python -c "import ai; print('‚úÖ AI –º–æ–¥—É–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç')"
	@echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Admin –º–æ–¥—É–ª—è..."
	python -c "import admin; print('‚úÖ Admin –º–æ–¥—É–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç')"
	@echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Monitoring –º–æ–¥—É–ª—è..."
	python -c "import monitoring; print('‚úÖ Monitoring –º–æ–¥—É–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç')"
	@echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Games –º–æ–¥—É–ª—è..."
	python -c "import games; print('‚úÖ Games –º–æ–¥—É–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç')"
	@echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Content –º–æ–¥—É–ª—è..."
	python -c "import content; print('‚úÖ Content –º–æ–¥—É–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç')"
	@echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Streaming –º–æ–¥—É–ª—è..."
	python -c "import streaming; print('‚úÖ Streaming –º–æ–¥—É–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç')"
	@echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Utils –º–æ–¥—É–ª—è..."
	python -c "import utils; print('‚úÖ Utils –º–æ–¥—É–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç')"
	@echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Config –º–æ–¥—É–ª—è..."
	python -c "import config; print('‚úÖ Config –º–æ–¥—É–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç')"

test-ai: ## –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å AI –º–æ–¥—É–ª—å
	python -m pytest tests.py::TestAIModule -v

test-admin: ## –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å Admin –º–æ–¥—É–ª—å
	python -m pytest tests.py::TestAdminModule -v

test-monitoring: ## –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å Monitoring –º–æ–¥—É–ª—å
	python -m pytest tests.py::TestMonitoringModule -v

test-games: ## –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å Games –º–æ–¥—É–ª—å
	python -m pytest tests.py::TestGamesModule -v

test-content: ## –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å Content –º–æ–¥—É–ª—å
	python -m pytest tests.py::TestContentModule -v

test-streaming: ## –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å Streaming –º–æ–¥—É–ª—å
	python -m pytest tests.py::TestStreamingModule -v

test-utils: ## –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å Utils –º–æ–¥—É–ª—å
	python -m pytest tests.py::TestUtilsModule -v

test-config: ## –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å Config –º–æ–¥—É–ª—å
	python -m pytest tests.py::TestConfigModule -v

clean: ## –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete
	find . -type f -name "*.log" -delete
	find . -type d -name ".pytest_cache" -delete
	find . -type d -name "htmlcov" -delete
	find . -type f -name ".coverage" -delete
	find . -type f -name "coverage.xml" -delete

clean-docker: ## –û—á–∏—Å—Ç–∏—Ç—å Docker –æ–±—Ä–∞–∑—ã –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
	docker system prune -f
	docker image prune -f
	docker container prune -f

docker-build: ## –°–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑
	docker build -t crycat-bot:v2.0.0 .

docker-build-dev: ## –°–æ–±—Ä–∞—Ç—å development Docker –æ–±—Ä–∞–∑
	docker build -f Dockerfile.dev -t crycat-bot:dev .

docker-run: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ Docker
	docker-compose up -d

docker-stop: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
	docker-compose down

docker-logs: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ Docker
	docker-compose logs -f

docker-shell: ## –í–æ–π—Ç–∏ –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
	docker exec -it crycat-bot /bin/bash

docker-test: ## –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å Docker –æ–±—Ä–∞–∑
	docker run --rm crycat-bot:v2.0.0 python -c "
	import ai, admin, monitoring, games, content, streaming, utils, config
	print('‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!')
	print('üöÄ Docker –æ–±—Ä–∞–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!')
	"

format: ## –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
	black .
	isort .

format-check: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
	black --check .
	isort --check-only .

lint: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –ª–∏–Ω—Ç–µ—Ä–æ–º
	ruff check .
	black --check .
	isort --check-only .

lint-fix: ## –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–æ–º
	ruff check . --fix
	black .
	isort .

type-check: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∏–ø—ã —Å mypy
	mypy . --ignore-missing-imports --exclude=__pycache__

security-check: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–æ–¥–∞
	bandit -r . -f json -o bandit-report.json

coverage: ## –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞
	python -m pytest tests.py --cov=. --cov-report=html --cov-report=term-missing

coverage-report: ## –û—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏
	open htmlcov/index.html || xdg-open htmlcov/index.html || start htmlcov/index.html

setup: install ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
	@echo "üöÄ –ü—Ä–æ–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ 'make run'"

setup-dev: install-dev ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "üîß –ü—Ä–æ–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!"
	@echo "üìù –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª"
	@echo "üß™ –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'make test' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
	@echo "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'make run' –¥–ª—è –∑–∞–ø—É—Å–∫–∞"

dev: setup-dev ## –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "üéØ –ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!"
	@echo "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
	@echo "  make run          - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"
	@echo "  make test         - –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"
	@echo "  make format       - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞"
	@echo "  make lint         - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞"
	@echo "  make type-check   - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤"
	@echo "  make coverage     - –ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞"

check-all: ## –í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
	@echo "üîç –í—ã–ø–æ–ª–Ω—è—é –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏..."
	@echo "üìù –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ..."
	@make format-check
	@echo "üîç Linting..."
	@make lint
	@echo "üîç Type checking..."
	@make type-check
	@echo "üîç Security check..."
	@make security-check
	@echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ..."
	@make test-pytest
	@echo "‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!"

pre-commit: ## –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–æ–º–º–∏—Ç—É
	@echo "üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–æ–º–º–∏—Ç—É..."
	@make format
	@make lint
	@make type-check
	@make test
	@echo "‚úÖ –ö–æ–¥ –≥–æ—Ç–æ–≤ –∫ –∫–æ–º–º–∏—Ç—É!"

ci: ## –ö–æ–º–∞–Ω–¥—ã –¥–ª—è CI/CD
	@echo "üöÄ –í—ã–ø–æ–ª–Ω—è—é CI/CD –ø—Ä–æ–≤–µ—Ä–∫–∏..."
	@make format-check
	@make lint
	@make type-check
	@make test-pytest
	@make security-check
	@echo "‚úÖ CI/CD –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!"

monitoring: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
	@echo "üìä –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
	python -c "
	import monitoring
	from monitoring import health_checker, metrics_collector
	print('üîç Health Check:')
	health = health_checker.check_health()
	for service, status in health.items():
		print(f'  {service}: {status.status}')
	print('üìà –ú–µ—Ç—Ä–∏–∫–∏:')
	print(f'  –°—á–µ—Ç—á–∏–∫–∏: {len(metrics_collector.counters)}')
	print(f'  Gauge: {len(metrics_collector.gauges)}')
	print(f'  –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã: {len(metrics_collector.histograms)}')
	"

config: ## –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	@echo "‚öôÔ∏è –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:"
	python -c "
	import config
	from config import bot_config
	print(f'ü§ñ –ò–º—è –±–æ—Ç–∞: {bot_config.bot_name}')
	print(f'üì¶ –í–µ—Ä—Å–∏—è: {bot_config.bot_version}')
	print(f'üß† AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {bot_config.ai_provider}')
	print(f'üéÆ –ò–≥—Ä—ã –≤–∫–ª—é—á–µ–Ω—ã: {bot_config.games_enabled}')
	print(f'üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω: {bot_config.monitoring_enabled}')
	print(f'üí∞ –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª—é—á–µ–Ω: {bot_config.content_enabled}')
	"

modules: ## –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥—É–ª—è—Ö
	@echo "üì¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥—É–ª—è—Ö:"
	@echo "  ai.py          - AI —Å–∏—Å—Ç–µ–º–∞ –∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã"
	@echo "  admin.py       - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
	@echo "  monitoring.py  - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –º–µ—Ç—Ä–∏–∫–∏"
	@echo "  games.py       - –ò–≥—Ä–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞"
	@echo "  content.py     - –ö–æ–Ω—Ç–µ–Ω—Ç –∏ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è"
	@echo "  streaming.py   - –°—Ç—Ä–∏–º–∏–Ω–≥ AI –æ—Ç–≤–µ—Ç–æ–≤"
	@echo "  utils.py       - –£—Ç–∏–ª–∏—Ç—ã –∏ —Ö–µ–ª–ø–µ—Ä—ã"
	@echo "  config.py      - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ env"
	@echo "  tests.py       - Unit —Ç–µ—Å—Ç—ã –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"

version: ## –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é
	@echo "üöÄ CryCat Bot v2.0.0"
	@echo "üìÖ –î–∞—Ç–∞ —Ä–µ–ª–∏–∑–∞: $(shell date +%Y-%m-%d)"
	@echo "üêç Python: $(shell python --version)"
	@echo "üì¶ –ú–æ–¥—É–ª–µ–π: 8"
	@echo "üß™ –¢–µ—Å—Ç–æ–≤: 50+"
	@echo "üìä –ü–æ–∫—Ä—ã—Ç–∏–µ: 80%+"