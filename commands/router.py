from __future__ import annotations

from dataclasses import dataclass
from typing import Callable, Dict, List, Optional, Tuple
import time
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
import os
from i18n import t


# -------- –¢–∏–ø—ã --------


@dataclass
class RouterContext:
    vk: object
    peer_id: int
    user_id: int
    text: str
    is_dm: bool


Handler = Callable[[RouterContext], Optional[str]]


@dataclass
class Command:
    name: str
    aliases: List[str]
    description: str
    handler: Handler
    admin_required: bool = False
    dm_only: bool = False
    chat_only: bool = False


# -------- –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ --------


_commands_by_alias: Dict[str, Command] = {}
_is_admin_check: Callable[[int], bool] = lambda _uid: False

# –ë–∞–∑–æ–≤—ã–π rate limit: –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞ peer (—á–∞—Ç/–õ–°)
_user_limit = 10
_user_window_sec = 60
_peer_limit = 30
_peer_window_sec = 60

_user_hits: Dict[int, List[float]] = {}
_peer_hits: Dict[int, List[float]] = {}


def configure_router(
    is_admin: Optional[Callable[[int], bool]] = None,
    user_limit: Optional[int] = None,
    user_window_sec: Optional[int] = None,
    peer_limit: Optional[int] = None,
    peer_window_sec: Optional[int] = None,
) -> None:
    global _is_admin_check, _user_limit, _user_window_sec, _peer_limit, _peer_window_sec
    if is_admin is not None:
        _is_admin_check = is_admin
    if user_limit is not None:
        _user_limit = int(user_limit)
    if user_window_sec is not None:
        _user_window_sec = int(user_window_sec)
    if peer_limit is not None:
        _peer_limit = int(peer_limit)
    if peer_window_sec is not None:
        _peer_window_sec = int(peer_window_sec)


def register_command(cmd: Command) -> None:
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–º—è –∏ –∞–ª–∏–∞—Å—ã –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
    keys = [cmd.name] + list(cmd.aliases)
    for key in keys:
        _commands_by_alias[key.strip().lower()] = cmd


def require_admin(handler: Handler) -> Handler:
    def wrapper(ctx: RouterContext) -> Optional[str]:
        if not _is_admin_check(ctx.user_id):
            return "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤"
        return handler(ctx)

    return wrapper


# -------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä --------


def _send_with_keyboard(ctx: RouterContext, text: str, keyboard_json: Optional[str] = None) -> None:
    try:
        if keyboard_json:
            ctx.vk.messages.send(peer_id=ctx.peer_id, message=text, keyboard=keyboard_json, random_id=0)
        else:
            ctx.vk.messages.send(peer_id=ctx.peer_id, message=text, random_id=0)
    except Exception:
        # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ä–æ—É—Ç–µ—Ä–µ, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å
        pass


def _build_inline_keyboard(button_rows: List[List[Tuple[str, Dict]]]) -> str:
    """–°—Ç—Ä–æ–∏—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É. button_rows: [[(label, payload_dict), ...], ...]"""
    kb = VkKeyboard(one_time=False, inline=True)
    first = True
    for row in button_rows:
        if not first:
            kb.add_line()
        first = False
        for label, payload in row:
            kb.add_button(label, color=VkKeyboardColor.PRIMARY, payload=payload)
    return kb.get_keyboard()


# ---------- –ê–¥–º–∏–Ω–∫–∞: inline –º–µ–Ω—é ----------


def _build_admin_main_inline_keyboard() -> str:
    rows = [
        [("‚öôÔ∏è –•—Ä–∞–Ω–∏–ª–∏—â–µ", {"action": "admin_storage"}), ("üåê –Ø–∑—ã–∫", {"action": "admin_lang"})],
        [("üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", {"action": "admin_monitoring"}), ("üõí –≠–∫–æ–Ω–æ–º–∏–∫–∞", {"action": "admin_economy"})],
        [("üíæ –ë—ç–∫–∞–ø—ã", {"action": "admin_backups"})],
    ]
    return _build_inline_keyboard(rows)


def _build_storage_inline_keyboard() -> str:
    rows = [
        [("SQLite", {"action": "set_storage", "value": "sqlite"}), ("JSON", {"action": "set_storage", "value": "json"})],
        [("Hybrid", {"action": "set_storage", "value": "hybrid"})],
        [("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", {"action": "admin_menu"})],
    ]
    return _build_inline_keyboard(rows)


def _build_lang_inline_keyboard() -> str:
    rows = [
        [("–†—É—Å—Å–∫–∏–π", {"action": "set_lang", "value": "ru"}), ("English", {"action": "set_lang", "value": "en"})],
        [("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", {"action": "admin_menu"})],
    ]
    return _build_inline_keyboard(rows)


def _build_conductor_inline_keyboard() -> str:
    rows = [
        [("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∏–ª–µ—Ç—ã", {"action": "conductor_action", "value": "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∏–ª–µ—Ç—ã"}),
         ("–ü–æ–º–æ—á—å –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º", {"action": "conductor_action", "value": "–ø–æ–º–æ—á—å –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º"})],
        [("–†–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã", {"action": "conductor_action", "value": "—Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã"}),
         ("–°–ª–µ–¥—É—é—â–∏–π –ø–æ–µ–∑–¥", {"action": "conductor_action", "value": "—Å–ª–µ–¥—É—é—â–∏–π –ø–æ–µ–∑–¥"})],
        [("–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É", {"action": "conductor_action", "value": "–∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É"})]
    ]
    # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ payload –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ callback, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å–∏ –∫–Ω–æ–ø–æ–∫ –∫–∞–∫ –∫–æ–º–∞–Ω–¥—É
    # –ö–ª–∏–µ–Ω—Ç VK –≤—Å—ë —Ä–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –ø–æ–¥—Ö–≤–∞—Ç—è—Ç –∫–æ–º–∞–Ω–¥—ã –Ω–∏–∂–µ
    return _build_inline_keyboard(rows)


def _build_shop_inline_keyboard(economy: object) -> str:
    # –ö–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º –≤–∏–¥–∞ "/buy <item_id>", —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç payload
    items = list(getattr(economy, "shop_items", {}).values())
    rows: List[List[Tuple[str, Dict]]] = []
    row: List[Tuple[str, Dict]] = []
    for item in items:
        label = f"/buy {item.id}"
        row.append((label, {"action": "text", "value": label}))
        if len(row) == 2:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    if not rows:
        rows = [[("–û–±–Ω–æ–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω", {"action": "text", "value": "/shop"})]]
    return _build_inline_keyboard(rows)


# ---------- –ë–∏–∑–Ω–µ—Å: inline –º–µ–Ω—é ----------


def _build_business_inline_keyboard() -> str:
    rows = [
        [("üí≥ –ë–∞–ª–∞–Ω—Å", {"action": "business_action", "value": "balance"}), ("üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π", {"action": "business_action", "value": "daily"})],
        [("üè™ –ú–∞–≥–∞–∑–∏–Ω", {"action": "business_action", "value": "shop"}), ("üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", {"action": "business_action", "value": "inventory"})],
        [("üè¨ –ê–∫—Ç–∏–≤—ã", {"action": "business_action", "value": "assets"}), ("üîß –£–ª—É—á—à–∏—Ç—å", {"action": "business_action", "value": "upgrade"})],
        [("üåü –ü—Ä–µ—Å—Ç–∏–∂", {"action": "business_action", "value": "prestige"})],
    ]
    return _build_inline_keyboard(rows)


def _handle_business(ctx: RouterContext) -> Optional[str]:
    from economy_social import economy_manager
    text = t(ctx.user_id, "shop_title")
    kb = _build_business_inline_keyboard()
    _send_with_keyboard(ctx, text, kb)
    return None


def _handle_business_action(ctx: RouterContext) -> Optional[str]:
    from economy_social import economy_manager, Currency
    action = ctx.text.strip().lower()
    if action == "balance":
        wallet = economy_manager.get_wallet(ctx.user_id)
        bal = wallet.balance.get(Currency.CRYCOIN, 0)
        _send_with_keyboard(ctx, f"üí∞ –ë–∞–ª–∞–Ω—Å: {bal} ü™ô", _build_business_inline_keyboard())
        return None
    if action == "daily":
        msg = economy_manager.daily_bonus(ctx.user_id)
        _send_with_keyboard(ctx, msg, _build_business_inline_keyboard())
        return None
    if action == "shop":
        msg = economy_manager.get_shop()
        _send_with_keyboard(ctx, msg, _build_shop_inline_keyboard(economy_manager))
        return None
    if action == "inventory":
        inv = economy_manager.get_inventory(ctx.user_id)
        if not inv.items:
            _send_with_keyboard(ctx, "üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç", _build_business_inline_keyboard())
            return None
        lines = ["üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:"]
        for iid, qty in inv.items.items():
            lines.append(f"‚Ä¢ {iid}: x{qty}")
        _send_with_keyboard(ctx, "\n".join(lines), _build_business_inline_keyboard())
        return None
    if action == "assets":
        # –ü–æ–∫–∞–∑ –º–∞–≥–∞–∑–∏–Ω–∞ –∞–∫—Ç–∏–≤–æ–≤ –∏–∑ bot_vk
        try:
            from bot_vk import get_business_shop
            msg = get_business_shop()
        except Exception:
            msg = "üè™ –ú–∞–≥–∞–∑–∏–Ω –∞–∫—Ç–∏–≤–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        kb_rows = []
        try:
            from bot_vk import BUSINESS_ASSETS  # dict of asset_key -> BusinessAsset
            row = []
            for key in BUSINESS_ASSETS.keys():
                label = f"/buy_asset {key}"
                row.append((label, {"action": "text", "value": f"buy_asset {key}"}))
                if len(row) == 2:
                    kb_rows.append(row)
                    row = []
            if row:
                kb_rows.append(row)
        except Exception:
            pass
        kb = _build_inline_keyboard(kb_rows) if kb_rows else _build_business_inline_keyboard()
        _send_with_keyboard(ctx, msg, kb)
        return None
    if action == "upgrade":
        # –ü–æ–∫–∞–∑ —É–ª—É—á—à–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            from bot_vk import get_business_profile
            prof = get_business_profile(ctx.user_id)
            if not prof.assets:
                _send_with_keyboard(ctx, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è", _build_business_inline_keyboard())
                return None
            lines = ["üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:"]
            kb_rows = []
            row = []
            for k, a in prof.assets.items():
                lines.append(f"‚Ä¢ {a.name} (—É—Ä.{a.level})")
                label = f"/upgrade_asset {k}"
                row.append((label, {"action": "text", "value": f"upgrade_asset {k}"}))
                if len(row) == 2:
                    kb_rows.append(row)
                    row = []
            if row:
                kb_rows.append(row)
            kb = _build_inline_keyboard(kb_rows)
            _send_with_keyboard(ctx, "\n".join(lines), kb)
        except Exception:
            _send_with_keyboard(ctx, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", _build_business_inline_keyboard())
        return None
    if action == "prestige":
        try:
            from bot_vk import prestige_reset
            msg = prestige_reset(ctx.user_id)
            _send_with_keyboard(ctx, msg, _build_business_inline_keyboard())
        except Exception:
            _send_with_keyboard(ctx, "‚ùå –ü—Ä–µ—Å—Ç–∏–∂ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", _build_business_inline_keyboard())
        return None
    return None

def _cleanup_hits(hits: List[float], now_ts: float, window_sec: int) -> None:
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
    cutoff = now_ts - window_sec
    while hits and hits[0] < cutoff:
        hits.pop(0)


def _rate_limited(user_id: int, peer_id: int, now_ts: float) -> Optional[str]:
    user_hits = _user_hits.setdefault(user_id, [])
    _cleanup_hits(user_hits, now_ts, _user_window_sec)
    if len(user_hits) >= _user_limit:
        wait_sec = max(1, int(user_hits[0] + _user_window_sec - now_ts))
        return f"‚è≥ –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–¥–æ–∂–¥–∏ {wait_sec} —Å–µ–∫."

    peer_hits = _peer_hits.setdefault(peer_id, [])
    _cleanup_hits(peer_hits, now_ts, _peer_window_sec)
    if len(peer_hits) >= _peer_limit:
        wait_sec = max(1, int(peer_hits[0] + _peer_window_sec - now_ts))
        return f"‚è≥ –ß–∞—Ç –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–¥–æ–∂–¥–∏ {wait_sec} —Å–µ–∫."

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ö–∏—Ç
    user_hits.append(now_ts)
    peer_hits.append(now_ts)
    return None


def dispatch_command(
    text: str,
    vk: object,
    peer_id: int,
    user_id: int,
    is_dm: bool,
) -> Tuple[bool, Optional[str]]:
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (handled, reply_text).
    –ï—Å–ª–∏ handler —Å–∞–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç, reply_text = None.
    """
    if not text:
        return False, None

    raw = text.strip()
    lower = raw.lower()

    def _map_label_to_action(s: str) -> str:
        s = s.strip().lower()
        mapping = {
            "/admin": "admin_menu", "admin": "admin_menu", "–∞–¥–º–∏–Ω": "admin_menu", "–∞–¥–º–∏–Ω-–º–µ–Ω—é": "admin_menu",
            "—Ö—Ä–∞–Ω–∏–ª–∏—â–µ": "admin_storage", "storage": "admin_storage", "‚öôÔ∏è —Ö—Ä–∞–Ω–∏–ª–∏—â–µ": "admin_storage",
            "—è–∑—ã–∫": "admin_lang", "language": "admin_lang", "üåê —è–∑—ã–∫": "admin_lang",
            "–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥": "admin_monitoring", "monitoring": "admin_monitoring", "üìà –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥": "admin_monitoring",
            "–±–∏–∑–Ω–µ—Å": "business", "business": "business", "üè¢ –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –±–∏–∑–Ω–µ—Å": "business",
            "–±–∞–ª–∞–Ω—Å": "set_business balance", "balance": "set_business balance",
            "–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π": "set_business daily", "daily": "set_business daily",
            "–º–∞–≥–∞–∑–∏–Ω": "set_business shop", "shop": "set_business shop",
            "–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å": "set_business inventory", "inventory": "set_business inventory",
            "—Ä—É—Å—Å–∫–∏–π": "set_lang ru", "russian": "set_lang ru",
            "english": "set_lang en", "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π": "set_lang en",
            "sqlite": "set_storage sqlite", "json": "set_storage json", "hybrid": "set_storage hybrid",
        }
        return mapping.get(s, s)

    mapped = _map_label_to_action(lower)
    if mapped != lower:
        lower = mapped
        raw = mapped

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π: /config restore N ‚Äî –ø–∞—Ä—Å–∏–Ω–≥ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
    if lower.startswith("/config restore ") or lower.startswith("config restore "):
        cmd = _commands_by_alias.get("/config restore")
        if not cmd:
            return False, None
        parts = raw.split(" ", 2)
        if len(parts) < 3:
            return True, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /config restore <–Ω–æ–º–µ—Ä> (—Å–º. /config list)"
        idx_str = parts[2].strip()
        ctx = RouterContext(vk=vk, peer_id=peer_id, user_id=user_id, text=idx_str, is_dm=is_dm)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞/–ø—Ä–∞–≤ –∏ RL
        if cmd.dm_only and not is_dm:
            return True, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –õ–°"
        if cmd.chat_only and is_dm:
            return True, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –±–µ—Å–µ–¥–∞—Ö"
        if cmd.admin_required and not _is_admin_check(user_id):
            return True, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤"
        rl = _rate_limited(user_id, peer_id, time.time())
        if rl:
            return True, rl
        return True, cmd.handler(ctx)

    # –ü—Ä—è–º–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ –∞–ª–∏–∞—Å–∞–º
    cmd = _commands_by_alias.get(lower)
    if not cmd:
        return False, None

    ctx = RouterContext(vk=vk, peer_id=peer_id, user_id=user_id, text=raw, is_dm=is_dm)

    # –ê–¥–º–∏–Ω—Å–∫–∏–µ inline –¥–µ–π—Å—Ç–≤–∏—è
    if lower == "admin_menu" and _is_admin_check(user_id):
        _send_with_keyboard(ctx, t(user_id, "admin_menu"), _build_admin_main_inline_keyboard())
        return True, None
    if lower == "admin_storage" and _is_admin_check(user_id):
        _send_with_keyboard(ctx, t(user_id, "select_storage"), _build_storage_inline_keyboard())
        return True, None
    if lower == "admin_lang" and _is_admin_check(user_id):
        _send_with_keyboard(ctx, t(user_id, "select_lang"), _build_lang_inline_keyboard())
        return True, None
    if lower.startswith("set_storage") and _is_admin_check(user_id):
        # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è: –º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ (–¥–ª—è –ø—Ä–∏–º–µ—Ä–∞), –≤ —Ä–µ–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
        parts = raw.split()
        value = parts[-1].strip().lower() if len(parts) > 1 else "sqlite"
        if value not in {"sqlite", "json", "hybrid"}:
            return True, "‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: sqlite|json|hybrid"
        os.environ["STORAGE_BACKEND"] = value
        _send_with_keyboard(ctx, f"‚úÖ STORAGE_BACKEND={value}. –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Å—Ç—É–ø–∏—Ç –≤ —Å–∏–ª—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.", _build_storage_inline_keyboard())
        return True, None
    if lower.startswith("set_lang") and _is_admin_check(user_id):
        parts = raw.split()
        value = parts[-1].strip().lower() if len(parts) > 1 else "ru"
        if value not in {"ru", "en"}:
            return True, "‚ùå –Ø–∑—ã–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: ru|en"
        os.environ["DEFAULT_LANGUAGE"] = "ru" if value == "ru" else "en"
        _send_with_keyboard(ctx, t(user_id, "lang_set", lang=value), _build_lang_inline_keyboard())
        return True, None

    # –Ø–∑—ã–∫ –¥–ª—è –ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /lang
    if lower in {"/lang", "lang", "—è–∑—ã–∫"}:
        _send_with_keyboard(ctx, t(user_id, "select_lang"), _build_lang_inline_keyboard())
        return True, None
    if lower.startswith("set_lang "):
        value = raw.split(" ", 1)[1].strip().lower()
        if value not in {"ru", "en"}:
            return True, "‚ùå ru|en"
        # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø—Ä–æ—Ñ–∏–ª—å
        try:
            from economy_social import social_manager
            profile = social_manager.get_profile(user_id)
            profile.preferred_language = value
            social_manager.update_profile(user_id, preferred_language=value)
            _send_with_keyboard(ctx, t(user_id, "lang_set", lang=value), _build_lang_inline_keyboard())
            return True, None
        except Exception:
            return True, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —è–∑—ã–∫"

    # –ë–∏–∑–Ω–µ—Å: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º mapped set_business <action>
    if lower.startswith("set_business "):
        action = raw.split(" ", 1)[1].strip()
        ctx2 = RouterContext(vk=vk, peer_id=peer_id, user_id=user_id, text=action, is_dm=is_dm)
        return True, _handle_business_action(ctx2)
    if lower.startswith("buy_asset "):
        asset_key = raw.split(" ", 1)[1].strip()
        try:
            from bot_vk import buy_asset
            msg = buy_asset(user_id, asset_key)
            _send_with_keyboard(ctx, msg, _build_business_inline_keyboard())
            return True, None
        except Exception:
            return True, "‚ùå –ü–æ–∫—É–ø–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    if lower.startswith("upgrade_asset "):
        asset_key = raw.split(" ", 1)[1].strip()
        try:
            from bot_vk import upgrade_asset
            msg = upgrade_asset(user_id, asset_key)
            _send_with_keyboard(ctx, msg, _build_business_inline_keyboard())
            return True, None
        except Exception:
            return True, "‚ùå –£–ª—É—á—à–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"

    # –ö–æ–Ω—Ç–µ–∫—Å—Ç/–ø—Ä–∞–≤–∞
    if cmd.dm_only and not is_dm:
        return True, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –õ–°"
    if cmd.chat_only and is_dm:
        return True, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –±–µ—Å–µ–¥–∞—Ö"
    if cmd.admin_required and not _is_admin_check(user_id):
        return True, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤"

    rl = _rate_limited(user_id, peer_id, time.time())
    if rl:
        return True, rl

    return True, cmd.handler(ctx)


# -------- –•–µ–Ω–¥–ª–µ—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é --------


def _handle_help(ctx: RouterContext) -> Optional[str]:
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø—Ä–∞–≤–∫–∏ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø—Ä–∞–≤/–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    visible: Dict[str, Command] = {}
    for alias, cmd in _commands_by_alias.items():
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–º—è –∫–æ–º–∞–Ω–¥—ã –≤ —Å–ø–∏—Å–∫–µ
        if alias != cmd.name:
            continue
        if cmd.dm_only and not ctx.is_dm:
            continue
        if cmd.chat_only and ctx.is_dm:
            continue
        if cmd.admin_required and not _is_admin_check(ctx.user_id):
            continue
        visible[cmd.name] = cmd

    if not visible:
        return "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

    lines: List[str] = [
        "CryBot ‚Äî –∫–æ–º–∞–Ω–¥—ã:",
    ]
    for _, cmd in sorted(visible.items(), key=lambda kv: kv[0]):
        aliases = ", ".join(a for a in cmd.aliases if a)
        if aliases:
            lines.append(f"{cmd.name} ({aliases}) ‚Äî {cmd.description}")
        else:
            lines.append(f"{cmd.name} ‚Äî {cmd.description}")

    return "\n".join(lines)


# -------- –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–≥—Ä --------
def _handle_conductor(ctx: RouterContext) -> Optional[str]:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä—ã –ü—Ä–æ–≤–æ–¥–Ω–∏—Ü–∞ –†–ñ–î"""
    from games_extended import conductor_game
    text = conductor_game.start_session(ctx.peer_id, ctx.user_id)
    _send_with_keyboard(ctx, text, _build_conductor_inline_keyboard())
    return None

def _handle_conductor_action(ctx: RouterContext) -> Optional[str]:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –≤ –∏–≥—Ä–µ –ü—Ä–æ–≤–æ–¥–Ω–∏—Ü–∞ –†–ñ–î"""
    from games_extended import conductor_game
    action = ctx.text.strip()
    text = conductor_game.handle_action(ctx.peer_id, action)
    _send_with_keyboard(ctx, text, _build_conductor_inline_keyboard())
    return None

def _handle_hangman(ctx: RouterContext) -> Optional[str]:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä—ã –í–∏—Å–µ–ª–∏—Ü–∞"""
    from games_extended import hangman_manager
    return hangman_manager.start_game(ctx.peer_id)

def _handle_hangman_guess(ctx: RouterContext) -> Optional[str]:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≥–∞–¥—ã–≤–∞–Ω–∏—è –±—É–∫–≤ –≤ –í–∏—Å–µ–ª–∏—Ü–µ"""
    from games_extended import hangman_manager
    letter = ctx.text.strip()
    return hangman_manager.guess_letter(ctx.peer_id, letter)

def _handle_poker_create(ctx: RouterContext) -> Optional[str]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∫–µ—Ä-—Å—Ç–æ–ª–∞"""
    from games_extended import poker_manager
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç bot_vk
    name = f"–ò–≥—Ä–æ–∫ {ctx.user_id}"
    return poker_manager.create_game(ctx.peer_id, ctx.user_id, name)

def _handle_poker_join(ctx: RouterContext) -> Optional[str]:
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –ø–æ–∫–µ—Ä-—Å—Ç–æ–ª—É"""
    from games_extended import poker_manager
    from bot_vk import get_user_name
    name = get_user_name(ctx.vk, ctx.user_id)
    return poker_manager.join_game(ctx.peer_id, ctx.user_id, name)

# -------- –ö–æ–º–∞–Ω–¥—ã —ç–∫–æ–Ω–æ–º–∏–∫–∏ --------
def _handle_daily(ctx: RouterContext) -> Optional[str]:
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å"""
    from economy_social import economy_manager
    return economy_manager.daily_bonus(ctx.user_id)

def _handle_balance(ctx: RouterContext) -> Optional[str]:
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å"""
    from economy_social import economy_manager, Currency
    wallet = economy_manager.get_wallet(ctx.user_id)
    balance = wallet.balance.get(Currency.CRYCOIN, 0)
    return f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} ü™ô"

def _handle_shop(ctx: RouterContext) -> Optional[str]:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω"""
    from economy_social import economy_manager
    text = economy_manager.get_shop()
    kb = _build_shop_inline_keyboard(economy_manager)
    _send_with_keyboard(ctx, text, kb)
    return None

def _handle_buy(ctx: RouterContext) -> Optional[str]:
    """–ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞"""
    from economy_social import economy_manager
    item_id = ctx.text.strip()
    return economy_manager.buy_item(ctx.user_id, item_id)

# -------- –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã --------
def _handle_profile(ctx: RouterContext) -> Optional[str]:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"""
    from economy_social import social_manager
    profile = social_manager.get_profile(ctx.user_id)
    return (
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å {profile.name}\n"
        f"üìä –£—Ä–æ–≤–µ–Ω—å: {profile.level}\n"
        f"üíï –°—Ç–∞—Ç—É—Å: {profile.relationship_status.value}\n"
        f"üë• –î—Ä—É–∑–µ–π: {len(profile.friends)}\n"
        f"üè∞ –ö–ª–∞–Ω: {'–î–∞' if profile.clan_id else '–ù–µ—Ç'}"
    )

def _handle_clan_create(ctx: RouterContext) -> Optional[str]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–Ω–∞"""
    from economy_social import social_manager
    parts = ctx.text.strip().split(maxsplit=1)
    if len(parts) < 2:
        return "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /clan create <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–æ–ø–∏—Å–∞–Ω–∏–µ>"
    
    name = parts[0]
    description = parts[1] if len(parts) > 1 else "–ù–æ–≤—ã–π –∫–ª–∞–Ω"
    return social_manager.create_clan(ctx.user_id, name, description)

def _handle_clan_join(ctx: RouterContext) -> Optional[str]:
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–ª–∞–Ω—É"""
    from economy_social import social_manager
    clan_id = ctx.text.strip()
    if not clan_id.isdigit():
        return "‚ùå ID –∫–ª–∞–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º"
    return social_manager.join_clan(ctx.user_id, int(clan_id))

def _handle_marry(ctx: RouterContext) -> Optional[str]:
    """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞"""
    from economy_social import social_manager
    partner_id = ctx.text.strip()
    if not partner_id.isdigit():
        return "‚ùå ID –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º"
    return social_manager.propose_marriage(ctx.user_id, int(partner_id))

@require_admin
def _handle_config_backup(ctx: RouterContext) -> Optional[str]:
    if not ctx.is_dm:
        return "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –õ–°"
    from admin import handle_admin_config_backup

    handle_admin_config_backup(ctx.vk, ctx.peer_id, ctx.user_id)
    return None


@require_admin
def _handle_config_list(ctx: RouterContext) -> Optional[str]:
    if not ctx.is_dm:
        return "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –õ–°"
    from admin import handle_admin_config_list

    handle_admin_config_list(ctx.vk, ctx.peer_id, ctx.user_id)
    return None


@require_admin
def _handle_config_restore(ctx: RouterContext) -> Optional[str]:
    if not ctx.is_dm:
        return "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –õ–°"
    from admin import handle_admin_config_restore

    idx_str = ctx.text.strip()
    handle_admin_config_restore(ctx.vk, ctx.peer_id, ctx.user_id, idx_str)
    return None

# -------- –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏ --------
def _handle_role_info(ctx: RouterContext) -> Optional[str]:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from admin import get_user_role, get_user_privileges
    role = get_user_role(ctx.user_id)
    privileges = get_user_privileges(ctx.user_id)
    
    privilege_names = {
        "edit_content": "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
        "view_stats": "–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", 
        "warn_users": "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        "delete_messages": "–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π",
        "kick_users": "–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        "ban_users": "–ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        "manage_roles": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏",
        "ai_control": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò"
    }
    
    privilege_list = []
    for priv in privileges:
        if priv == "*":
            privilege_list.append("–í—Å–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏")
            break
        privilege_list.append(privilege_names.get(priv, priv))
    
    return f"üë§ –í–∞—à–∞ —Ä–æ–ª—å: {role.value}\nüîë –ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏:\n" + "\n".join(f"‚Ä¢ {priv}" for priv in privilege_list)

@require_admin
def _handle_role_set(ctx: RouterContext) -> Optional[str]:
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    from admin import can_manage_roles, UserRole
    from storage import set_user_profile, get_user_profile
    
    if not can_manage_roles(ctx.user_id):
        return "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏"
    
    parts = ctx.text.split()
    if len(parts) < 3:
        return "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /role set <user_id> <role>"
    
    try:
        target_id = int(parts[1])
        role_name = parts[2].lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–∏
        try:
            role = UserRole(role_name)
        except ValueError:
            return f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å: {role_name}. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(r.value for r in UserRole)}"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
        profile = get_user_profile(target_id) or {}
        profile["role"] = role.value
        set_user_profile(target_id, profile)
        
        return f"‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {role.value}"
    except ValueError:
        return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

def _handle_role_list(ctx: RouterContext) -> Optional[str]:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π"""
    from admin import UserRole
    
    roles_info = []
    for role in UserRole:
        roles_info.append(f"‚Ä¢ {role.value} - {_get_role_description(role)}")
    
    return "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏:\n" + "\n".join(roles_info)

def _get_role_description(role) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏"""
    descriptions = {
        "user": "–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        "editor": "–ú–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç",
        "moderator": "–ú–æ–∂–µ—Ç –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç", 
        "admin": "–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º",
        "super_admin": "–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞"
    }
    return descriptions.get(role.value, "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

# -------- –ö–æ–º–∞–Ω–¥—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ --------
@require_admin
def _handle_stats(ctx: RouterContext) -> Optional[str]:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    from admin import can_view_stats
    from monitoring import health_checker, metrics_collector
    
    if not can_view_stats(ctx.user_id):
        return "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è
        health_status = health_checker.get_overall_status()
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        total_requests = metrics_collector.get_counter("ai_requests_total")
        successful_requests = metrics_collector.get_counter("ai_success_total")
        failed_requests = metrics_collector.get_counter("ai_errors_total")
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        success_rate = 0.0
        if total_requests > 0:
            success_rate = (successful_requests / total_requests) * 100
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞
        from cache_monitoring import cache_manager
        cache_stats = cache_manager.get_stats()
        cache_hit_rate = cache_stats.get("hit_rate", 0.0)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        from storage import get_storage_from_env
        storage = get_storage_from_env()
        profiles = storage.get_all("profiles")
        active_users = 0
        current_time = time.time()
        one_hour_ago = current_time - 3600
        
        for user_id, profile in profiles.items():
            if isinstance(profile, dict) and 'last_activity' in profile:
                last_activity = profile.get('last_activity', 0)
                if last_activity > one_hour_ago:
                    active_users += 1
        
        stats_text = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:

üè• –°—Ç–∞—Ç—É—Å: {health_status}
üìà –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ò–ò: {total_requests}
‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {successful_requests}
‚ùå –û—à–∏–±–æ–∫: {failed_requests}
üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%
üíæ –ö–µ—à (–ø–æ–ø–∞–¥–∞–Ω–∏—è): {cache_hit_rate:.1f}%
üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users}
"""
        
        return stats_text
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"

@require_admin
def _handle_health(ctx: RouterContext) -> Optional[str]:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    from admin import can_view_stats
    from monitoring import health_checker
    
    if not can_view_stats(ctx.user_id):
        return "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"
    
    try:
        health_status = health_checker.check_health()
        overall_status = health_checker.get_overall_status()
        
        status_emoji = {
            "healthy": "‚úÖ",
            "degraded": "‚ö†Ô∏è", 
            "unhealthy": "‚ùå"
        }
        
        health_text = f"üè• –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {status_emoji.get(overall_status, '‚ùì')} {overall_status}\n\n"
        
        for service_name, status in health_status.items():
            emoji = status_emoji.get(status.status, "‚ùì")
            health_text += f"{emoji} {service_name}: {status.message}\n"
        
        return health_text
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {str(e)}"

@require_admin
def _handle_cache_clear(ctx: RouterContext) -> Optional[str]:
    """–û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à"""
    from admin import can_view_stats
    from cache_monitoring import cache_manager
    
    if not can_view_stats(ctx.user_id):
        return "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–µ—à–µ–º"
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –æ—á–∏—Å—Ç–∫–∏
        stats_before = cache_manager.get_stats()
        items_before = stats_before.get("size", 0)
        
        # –û—á–∏—â–∞–µ–º –∫–µ—à
        cache_manager.clear()
        
        return f"‚úÖ –ö–µ—à –æ—á–∏—â–µ–Ω! –£–¥–∞–ª–µ–Ω–æ {items_before} —ç–ª–µ–º–µ–Ω—Ç–æ–≤."
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞: {str(e)}"


# -------- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è builtin-–∫–æ–º–∞–Ω–¥ --------


def _register_builtin_commands() -> None:
    register_command(
        Command(
            name="/help",
            aliases=["help", "–ø–æ–º–æ—â—å", "halp", "–∫–æ–º–∞–Ω–¥—ã"],
            description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥",
            handler=_handle_help,
            admin_required=False,
        )
    )
    register_command(
        Command(
            name="/admin",
            aliases=["admin", "–∞–¥–º–∏–Ω"],
            description="–ê–¥–º–∏–Ω-–º–µ–Ω—é (inline)",
            handler=lambda ctx: (_send_with_keyboard(ctx, t(ctx.user_id, "admin_menu"), _build_admin_main_inline_keyboard()) or None),
            admin_required=True,
            dm_only=True,
        )
    )

    # –ù–æ–≤—ã–µ –∏–≥—Ä—ã
    register_command(
        Command(
            name="/conductor",
            aliases=["conductor", "–ø—Ä–æ–≤–æ–¥–Ω–∏—Ü–∞", "—Ä–∂–¥"],
            description="–ò–≥—Ä–∞ '–ü—Ä–æ–≤–æ–¥–Ω–∏—Ü–∞ –†–ñ–î'",
            handler=_handle_conductor,
            admin_required=False,
        )
    )
    register_command(
        Command(
            name="/conductor action",
            aliases=["conductor action", "–ø—Ä–æ–≤–æ–¥–Ω–∏—Ü–∞ –¥–µ–π—Å—Ç–≤–∏–µ"],
            description="–î–µ–π—Å—Ç–≤–∏–µ –≤ –∏–≥—Ä–µ '–ü—Ä–æ–≤–æ–¥–Ω–∏—Ü–∞ –†–ñ–î'",
            handler=_handle_conductor_action,
            admin_required=False,
        )
    )
    register_command(
        Command(
            name="/hangman",
            aliases=["hangman", "–≤–∏—Å–µ–ª–∏—Ü–∞"],
            description="–ò–≥—Ä–∞ '–í–∏—Å–µ–ª–∏—Ü–∞'",
            handler=_handle_hangman,
            admin_required=False,
        )
    )
    register_command(
        Command(
            name="/poker create",
            aliases=["poker create", "–ø–æ–∫–µ—Ä —Å–æ–∑–¥–∞—Ç—å"],
            description="–°–æ–∑–¥–∞—Ç—å –ø–æ–∫–µ—Ä-—Å—Ç–æ–ª",
            handler=_handle_poker_create,
            admin_required=False,
        )
    )
    register_command(
        Command(
            name="/poker join",
            aliases=["poker join", "–ø–æ–∫–µ—Ä –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è"],
            description="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø–æ–∫–µ—Ä-—Å—Ç–æ–ª—É",
            handler=_handle_poker_join,
            admin_required=False,
        )
    )

    # –≠–∫–æ–Ω–æ–º–∏–∫–∞
    register_command(
        Command(
            name="/daily",
            aliases=["daily", "–±–æ–Ω—É—Å", "–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π"],
            description="–ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å",
            handler=_handle_daily,
            admin_required=False,
        )
    )
    register_command(
        Command(
            name="/balance",
            aliases=["balance", "–±–∞–ª–∞–Ω—Å", "–¥–µ–Ω—å–≥–∏"],
            description="–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å",
            handler=_handle_balance,
            admin_required=False,
        )
    )
    register_command(
        Command(
            name="/shop",
            aliases=["shop", "–º–∞–≥–∞–∑–∏–Ω"],
            description="–ü–æ–∫–∞–∑–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω",
            handler=_handle_shop,
            admin_required=False,
        )
    )
    register_command(
        Command(
            name="/business",
            aliases=["business", "–±–∏–∑–Ω–µ—Å"],
            description="–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –±–∏–∑–Ω–µ—Å ‚Äî –º–µ–Ω—é",
            handler=_handle_business,
            admin_required=False,
        )
    )
    register_command(
        Command(
            name="/buy",
            aliases=["buy", "–∫—É–ø–∏—Ç—å"],
            description="–ö—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç: /buy <id>",
            handler=_handle_buy,
            admin_required=False,
        )
    )

    # –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ
    register_command(
        Command(
            name="/profile",
            aliases=["profile", "–ø—Ä–æ—Ñ–∏–ª—å"],
            description="–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
            handler=_handle_profile,
            admin_required=False,
        )
    )
    register_command(
        Command(
            name="/clan create",
            aliases=["clan create", "–∫–ª–∞–Ω —Å–æ–∑–¥–∞—Ç—å"],
            description="–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–Ω: /clan create <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–æ–ø–∏—Å–∞–Ω–∏–µ>",
            handler=_handle_clan_create,
            admin_required=False,
        )
    )
    register_command(
        Command(
            name="/clan join",
            aliases=["clan join", "–∫–ª–∞–Ω –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è"],
            description="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–ª–∞–Ω—É: /clan join <id>",
            handler=_handle_clan_join,
            admin_required=False,
        )
    )
    register_command(
        Command(
            name="/marry",
            aliases=["marry", "–∂–µ–Ω–∏—Ç—å—Å—è"],
            description="–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –±—Ä–∞–∫: /marry <user_id>",
            handler=_handle_marry,
            admin_required=False,
        )
    )

    # /config backup|list|restore ‚Äî —Ç–æ–ª—å–∫–æ –õ–° –∏ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º
    register_command(
        Command(
            name="/config backup",
            aliases=["config backup"],
            description="–°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
            handler=_handle_config_backup,
            admin_required=True,
            dm_only=True,
        )
    )
    register_command(
        Command(
            name="/config list",
            aliases=["config list"],
            description="–°–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
            handler=_handle_config_list,
            admin_required=True,
            dm_only=True,
        )
    )
    register_command(
        Command(
            name="/config restore",
            aliases=["config restore"],
            description="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –∏–∑ –±—ç–∫–∞–ø–∞: /config restore <–Ω–æ–º–µ—Ä>",
            handler=_handle_config_restore,
            admin_required=True,
            dm_only=True,
        )
    )

    # –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏
    register_command(
        Command(
            name="/role info",
            aliases=["role info", "—Ä–æ–ª—å –∏–Ω—Ñ–æ"],
            description="–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–µ–π —Ä–æ–ª–∏",
            handler=_handle_role_info,
            admin_required=False,
        )
    )
    register_command(
        Command(
            name="/role set",
            aliases=["role set", "—Ä–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"],
            description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /role set <user_id> <role>",
            handler=_handle_role_set,
            admin_required=True,
        )
    )
    register_command(
        Command(
            name="/role list",
            aliases=["role list", "—Ä–æ–ª—å —Å–ø–∏—Å–æ–∫"],
            description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π",
            handler=_handle_role_list,
            admin_required=False,
        )
    )

    # –ö–æ–º–∞–Ω–¥—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    register_command(
        Command(
            name="/stats",
            aliases=["stats", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
            description="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞",
            handler=_handle_stats,
            admin_required=True,
        )
    )
    register_command(
        Command(
            name="/health",
            aliases=["health", "–∑–¥–æ—Ä–æ–≤—å–µ"],
            description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã",
            handler=_handle_health,
            admin_required=True,
        )
    )
    register_command(
        Command(
            name="/cache clear",
            aliases=["cache clear", "–∫–µ—à –æ—á–∏—Å—Ç–∏—Ç—å"],
            description="–û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à",
            handler=_handle_cache_clear,
            admin_required=True,
        )
    )


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
_register_builtin_commands()

