from __future__ import annotations

from dataclasses import dataclass
from typing import Callable, Dict, List, Optional, Tuple
import time


# -------- –¢–∏–ø—ã --------


@dataclass
class RouterContext:
    vk: object
    peer_id: int
    user_id: int
    text: str
    is_dm: bool


Handler = Callable[[RouterContext], Optional[str]]


@dataclass
class Command:
    name: str
    aliases: List[str]
    description: str
    handler: Handler
    admin_required: bool = False
    dm_only: bool = False
    chat_only: bool = False


# -------- –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ --------


_commands_by_alias: Dict[str, Command] = {}
_is_admin_check: Callable[[int], bool] = lambda _uid: False

# –ë–∞–∑–æ–≤—ã–π rate limit: –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞ peer (—á–∞—Ç/–õ–°)
_user_limit = 10
_user_window_sec = 60
_peer_limit = 30
_peer_window_sec = 60

_user_hits: Dict[int, List[float]] = {}
_peer_hits: Dict[int, List[float]] = {}


def configure_router(
    is_admin: Optional[Callable[[int], bool]] = None,
    user_limit: Optional[int] = None,
    user_window_sec: Optional[int] = None,
    peer_limit: Optional[int] = None,
    peer_window_sec: Optional[int] = None,
) -> None:
    global _is_admin_check, _user_limit, _user_window_sec, _peer_limit, _peer_window_sec
    if is_admin is not None:
        _is_admin_check = is_admin
    if user_limit is not None:
        _user_limit = int(user_limit)
    if user_window_sec is not None:
        _user_window_sec = int(user_window_sec)
    if peer_limit is not None:
        _peer_limit = int(peer_limit)
    if peer_window_sec is not None:
        _peer_window_sec = int(peer_window_sec)


def register_command(cmd: Command) -> None:
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–º—è –∏ –∞–ª–∏–∞—Å—ã –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
    keys = [cmd.name] + list(cmd.aliases)
    for key in keys:
        _commands_by_alias[key.strip().lower()] = cmd


def require_admin(handler: Handler) -> Handler:
    def wrapper(ctx: RouterContext) -> Optional[str]:
        if not _is_admin_check(ctx.user_id):
            return "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤"
        return handler(ctx)

    return wrapper


def _cleanup_hits(hits: List[float], now_ts: float, window_sec: int) -> None:
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
    cutoff = now_ts - window_sec
    while hits and hits[0] < cutoff:
        hits.pop(0)


def _rate_limited(user_id: int, peer_id: int, now_ts: float) -> Optional[str]:
    user_hits = _user_hits.setdefault(user_id, [])
    _cleanup_hits(user_hits, now_ts, _user_window_sec)
    if len(user_hits) >= _user_limit:
        wait_sec = max(1, int(user_hits[0] + _user_window_sec - now_ts))
        return f"‚è≥ –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–¥–æ–∂–¥–∏ {wait_sec} —Å–µ–∫."

    peer_hits = _peer_hits.setdefault(peer_id, [])
    _cleanup_hits(peer_hits, now_ts, _peer_window_sec)
    if len(peer_hits) >= _peer_limit:
        wait_sec = max(1, int(peer_hits[0] + _peer_window_sec - now_ts))
        return f"‚è≥ –ß–∞—Ç –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–¥–æ–∂–¥–∏ {wait_sec} —Å–µ–∫."

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ö–∏—Ç
    user_hits.append(now_ts)
    peer_hits.append(now_ts)
    return None


def dispatch_command(
    text: str,
    vk: object,
    peer_id: int,
    user_id: int,
    is_dm: bool,
) -> Tuple[bool, Optional[str]]:
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (handled, reply_text).
    –ï—Å–ª–∏ handler —Å–∞–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç, reply_text = None.
    """
    if not text:
        return False, None

    raw = text.strip()
    lower = raw.lower()

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π: /config restore N ‚Äî –ø–∞—Ä—Å–∏–Ω–≥ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
    if lower.startswith("/config restore ") or lower.startswith("config restore "):
        cmd = _commands_by_alias.get("/config restore")
        if not cmd:
            return False, None
        parts = raw.split(" ", 2)
        if len(parts) < 3:
            return True, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /config restore <–Ω–æ–º–µ—Ä> (—Å–º. /config list)"
        idx_str = parts[2].strip()
        ctx = RouterContext(vk=vk, peer_id=peer_id, user_id=user_id, text=idx_str, is_dm=is_dm)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞/–ø—Ä–∞–≤ –∏ RL
        if cmd.dm_only and not is_dm:
            return True, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –õ–°"
        if cmd.chat_only and is_dm:
            return True, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –±–µ—Å–µ–¥–∞—Ö"
        if cmd.admin_required and not _is_admin_check(user_id):
            return True, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤"
        rl = _rate_limited(user_id, peer_id, time.time())
        if rl:
            return True, rl
        return True, cmd.handler(ctx)

    # –ü—Ä—è–º–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ –∞–ª–∏–∞—Å–∞–º
    cmd = _commands_by_alias.get(lower)
    if not cmd:
        return False, None

    ctx = RouterContext(vk=vk, peer_id=peer_id, user_id=user_id, text=raw, is_dm=is_dm)

    # –ö–æ–Ω—Ç–µ–∫—Å—Ç/–ø—Ä–∞–≤–∞
    if cmd.dm_only and not is_dm:
        return True, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –õ–°"
    if cmd.chat_only and is_dm:
        return True, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –±–µ—Å–µ–¥–∞—Ö"
    if cmd.admin_required and not _is_admin_check(user_id):
        return True, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤"

    rl = _rate_limited(user_id, peer_id, time.time())
    if rl:
        return True, rl

    return True, cmd.handler(ctx)


# -------- –•–µ–Ω–¥–ª–µ—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é --------


def _handle_help(ctx: RouterContext) -> Optional[str]:
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø—Ä–∞–≤–∫–∏ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø—Ä–∞–≤/–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    visible: Dict[str, Command] = {}
    for alias, cmd in _commands_by_alias.items():
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–º—è –∫–æ–º–∞–Ω–¥—ã –≤ —Å–ø–∏—Å–∫–µ
        if alias != cmd.name:
            continue
        if cmd.dm_only and not ctx.is_dm:
            continue
        if cmd.chat_only and ctx.is_dm:
            continue
        if cmd.admin_required and not _is_admin_check(ctx.user_id):
            continue
        visible[cmd.name] = cmd

    if not visible:
        return "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

    lines: List[str] = [
        "CryBot ‚Äî –∫–æ–º–∞–Ω–¥—ã:",
    ]
    for _, cmd in sorted(visible.items(), key=lambda kv: kv[0]):
        aliases = ", ".join(a for a in cmd.aliases if a)
        if aliases:
            lines.append(f"{cmd.name} ({aliases}) ‚Äî {cmd.description}")
        else:
            lines.append(f"{cmd.name} ‚Äî {cmd.description}")

    return "\n".join(lines)


# -------- –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–≥—Ä --------
def _handle_conductor(ctx: RouterContext) -> Optional[str]:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä—ã –ü—Ä–æ–≤–æ–¥–Ω–∏—Ü–∞ –†–ñ–î"""
    from games_extended import conductor_game
    return conductor_game.start_session(ctx.peer_id, ctx.user_id)

def _handle_conductor_action(ctx: RouterContext) -> Optional[str]:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –≤ –∏–≥—Ä–µ –ü—Ä–æ–≤–æ–¥–Ω–∏—Ü–∞ –†–ñ–î"""
    from games_extended import conductor_game
    action = ctx.text.strip()
    return conductor_game.handle_action(ctx.peer_id, action)

def _handle_hangman(ctx: RouterContext) -> Optional[str]:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä—ã –í–∏—Å–µ–ª–∏—Ü–∞"""
    from games_extended import hangman_manager
    return hangman_manager.start_game(ctx.peer_id)

def _handle_hangman_guess(ctx: RouterContext) -> Optional[str]:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≥–∞–¥—ã–≤–∞–Ω–∏—è –±—É–∫–≤ –≤ –í–∏—Å–µ–ª–∏—Ü–µ"""
    from games_extended import hangman_manager
    letter = ctx.text.strip()
    return hangman_manager.guess_letter(ctx.peer_id, letter)

def _handle_poker_create(ctx: RouterContext) -> Optional[str]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∫–µ—Ä-—Å—Ç–æ–ª–∞"""
    from games_extended import poker_manager
    from bot_vk import get_user_name
    name = get_user_name(ctx.vk, ctx.user_id)
    return poker_manager.create_game(ctx.peer_id, ctx.user_id, name)

def _handle_poker_join(ctx: RouterContext) -> Optional[str]:
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –ø–æ–∫–µ—Ä-—Å—Ç–æ–ª—É"""
    from games_extended import poker_manager
    from bot_vk import get_user_name
    name = get_user_name(ctx.vk, ctx.user_id)
    return poker_manager.join_game(ctx.peer_id, ctx.user_id, name)

# -------- –ö–æ–º–∞–Ω–¥—ã —ç–∫–æ–Ω–æ–º–∏–∫–∏ --------
def _handle_daily(ctx: RouterContext) -> Optional[str]:
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å"""
    from economy_social import economy_manager
    return economy_manager.daily_bonus(ctx.user_id)

def _handle_balance(ctx: RouterContext) -> Optional[str]:
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å"""
    from economy_social import economy_manager, Currency
    wallet = economy_manager.get_wallet(ctx.user_id)
    balance = wallet.balance.get(Currency.CRYCOIN, 0)
    return f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} ü™ô"

def _handle_shop(ctx: RouterContext) -> Optional[str]:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω"""
    from economy_social import economy_manager
    return economy_manager.get_shop()

def _handle_buy(ctx: RouterContext) -> Optional[str]:
    """–ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞"""
    from economy_social import economy_manager
    item_id = ctx.text.strip()
    return economy_manager.buy_item(ctx.user_id, item_id)

# -------- –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã --------
def _handle_profile(ctx: RouterContext) -> Optional[str]:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"""
    from economy_social import social_manager
    profile = social_manager.get_profile(ctx.user_id)
    return (
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å {profile.name}\n"
        f"üìä –£—Ä–æ–≤–µ–Ω—å: {profile.level}\n"
        f"üíï –°—Ç–∞—Ç—É—Å: {profile.relationship_status.value}\n"
        f"üë• –î—Ä—É–∑–µ–π: {len(profile.friends)}\n"
        f"üè∞ –ö–ª–∞–Ω: {'–î–∞' if profile.clan_id else '–ù–µ—Ç'}"
    )

def _handle_clan_create(ctx: RouterContext) -> Optional[str]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–Ω–∞"""
    from economy_social import social_manager
    parts = ctx.text.strip().split(maxsplit=1)
    if len(parts) < 2:
        return "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /clan create <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–æ–ø–∏—Å–∞–Ω–∏–µ>"
    
    name = parts[0]
    description = parts[1] if len(parts) > 1 else "–ù–æ–≤—ã–π –∫–ª–∞–Ω"
    return social_manager.create_clan(ctx.user_id, name, description)

def _handle_clan_join(ctx: RouterContext) -> Optional[str]:
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–ª–∞–Ω—É"""
    from economy_social import social_manager
    clan_id = ctx.text.strip()
    if not clan_id.isdigit():
        return "‚ùå ID –∫–ª–∞–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º"
    return social_manager.join_clan(ctx.user_id, int(clan_id))

def _handle_marry(ctx: RouterContext) -> Optional[str]:
    """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞"""
    from economy_social import social_manager
    partner_id = ctx.text.strip()
    if not partner_id.isdigit():
        return "‚ùå ID –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º"
    return social_manager.propose_marriage(ctx.user_id, int(partner_id))

@require_admin
def _handle_config_backup(ctx: RouterContext) -> Optional[str]:
    if not ctx.is_dm:
        return "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –õ–°"
    from admin import handle_admin_config_backup

    handle_admin_config_backup(ctx.vk, ctx.peer_id, ctx.user_id)
    return None


@require_admin
def _handle_config_list(ctx: RouterContext) -> Optional[str]:
    if not ctx.is_dm:
        return "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –õ–°"
    from admin import handle_admin_config_list

    handle_admin_config_list(ctx.vk, ctx.peer_id, ctx.user_id)
    return None


@require_admin
def _handle_config_restore(ctx: RouterContext) -> Optional[str]:
    if not ctx.is_dm:
        return "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –õ–°"
    from admin import handle_admin_config_restore

    idx_str = ctx.text.strip()
    handle_admin_config_restore(ctx.vk, ctx.peer_id, ctx.user_id, idx_str)
    return None


# -------- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è builtin-–∫–æ–º–∞–Ω–¥ --------


def _register_builtin_commands() -> None:
    register_command(
        Command(
            name="/help",
            aliases=["help", "–ø–æ–º–æ—â—å", "halp", "–∫–æ–º–∞–Ω–¥—ã"],
            description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥",
            handler=_handle_help,
            admin_required=False,
        )
    )

    # –ù–æ–≤—ã–µ –∏–≥—Ä—ã
    register_command(
        Command(
            name="/conductor",
            aliases=["conductor", "–ø—Ä–æ–≤–æ–¥–Ω–∏—Ü–∞", "—Ä–∂–¥"],
            description="–ò–≥—Ä–∞ '–ü—Ä–æ–≤–æ–¥–Ω–∏—Ü–∞ –†–ñ–î'",
            handler=_handle_conductor,
            admin_required=False,
        )
    )
    register_command(
        Command(
            name="/hangman",
            aliases=["hangman", "–≤–∏—Å–µ–ª–∏—Ü–∞"],
            description="–ò–≥—Ä–∞ '–í–∏—Å–µ–ª–∏—Ü–∞'",
            handler=_handle_hangman,
            admin_required=False,
        )
    )
    register_command(
        Command(
            name="/poker create",
            aliases=["poker create", "–ø–æ–∫–µ—Ä —Å–æ–∑–¥–∞—Ç—å"],
            description="–°–æ–∑–¥–∞—Ç—å –ø–æ–∫–µ—Ä-—Å—Ç–æ–ª",
            handler=_handle_poker_create,
            admin_required=False,
        )
    )
    register_command(
        Command(
            name="/poker join",
            aliases=["poker join", "–ø–æ–∫–µ—Ä –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è"],
            description="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø–æ–∫–µ—Ä-—Å—Ç–æ–ª—É",
            handler=_handle_poker_join,
            admin_required=False,
        )
    )

    # –≠–∫–æ–Ω–æ–º–∏–∫–∞
    register_command(
        Command(
            name="/daily",
            aliases=["daily", "–±–æ–Ω—É—Å", "–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π"],
            description="–ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å",
            handler=_handle_daily,
            admin_required=False,
        )
    )
    register_command(
        Command(
            name="/balance",
            aliases=["balance", "–±–∞–ª–∞–Ω—Å", "–¥–µ–Ω—å–≥–∏"],
            description="–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å",
            handler=_handle_balance,
            admin_required=False,
        )
    )
    register_command(
        Command(
            name="/shop",
            aliases=["shop", "–º–∞–≥–∞–∑–∏–Ω"],
            description="–ü–æ–∫–∞–∑–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω",
            handler=_handle_shop,
            admin_required=False,
        )
    )
    register_command(
        Command(
            name="/buy",
            aliases=["buy", "–∫—É–ø–∏—Ç—å"],
            description="–ö—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç: /buy <id>",
            handler=_handle_buy,
            admin_required=False,
        )
    )

    # –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ
    register_command(
        Command(
            name="/profile",
            aliases=["profile", "–ø—Ä–æ—Ñ–∏–ª—å"],
            description="–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
            handler=_handle_profile,
            admin_required=False,
        )
    )
    register_command(
        Command(
            name="/clan create",
            aliases=["clan create", "–∫–ª–∞–Ω —Å–æ–∑–¥–∞—Ç—å"],
            description="–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–Ω: /clan create <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–æ–ø–∏—Å–∞–Ω–∏–µ>",
            handler=_handle_clan_create,
            admin_required=False,
        )
    )
    register_command(
        Command(
            name="/clan join",
            aliases=["clan join", "–∫–ª–∞–Ω –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è"],
            description="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–ª–∞–Ω—É: /clan join <id>",
            handler=_handle_clan_join,
            admin_required=False,
        )
    )
    register_command(
        Command(
            name="/marry",
            aliases=["marry", "–∂–µ–Ω–∏—Ç—å—Å—è"],
            description="–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –±—Ä–∞–∫: /marry <user_id>",
            handler=_handle_marry,
            admin_required=False,
        )
    )

    # /config backup|list|restore ‚Äî —Ç–æ–ª—å–∫–æ –õ–° –∏ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º
    register_command(
        Command(
            name="/config backup",
            aliases=["config backup"],
            description="–°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
            handler=_handle_config_backup,
            admin_required=True,
            dm_only=True,
        )
    )
    register_command(
        Command(
            name="/config list",
            aliases=["config list"],
            description="–°–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
            handler=_handle_config_list,
            admin_required=True,
            dm_only=True,
        )
    )
    register_command(
        Command(
            name="/config restore",
            aliases=["config restore"],
            description="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –∏–∑ –±—ç–∫–∞–ø–∞: /config restore <–Ω–æ–º–µ—Ä>",
            handler=_handle_config_restore,
            admin_required=True,
            dm_only=True,
        )
    )


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
_register_builtin_commands()

