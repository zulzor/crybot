"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã –¥–ª—è CryBot
"""
import random
import time
from dataclasses import dataclass, field
from typing import Dict, List, Optional, Set, Tuple
from enum import Enum


# -------- –ü—Ä–æ–≤–æ–¥–Ω–∏—Ü–∞ –†–ñ–î --------
class TrainStatus(Enum):
    ON_TIME = "–≤—Ä–µ–º—è"
    DELAYED = "–∑–∞–¥–µ—Ä–∂–∫–∞"
    CANCELLED = "–æ—Ç–º–µ–Ω—ë–Ω"
    DIVERTED = "–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω"


@dataclass
class Train:
    number: str
    route: str
    departure: str
    arrival: str
    status: TrainStatus
    delay_minutes: int = 0
    platform: str = "?"
    passengers: int = 0
    problems: List[str] = field(default_factory=list)


@dataclass
class ConductorSession:
    peer_id: int
    user_id: int
    score: int = 0
    trains_handled: int = 0
    passengers_helped: int = 0
    problems_solved: int = 0
    start_time: float = field(default_factory=time.time)
    current_train: Optional[Train] = None
    is_active: bool = False


class ConductorGame:
    def __init__(self):
        self.sessions: Dict[int, ConductorSession] = {}
        self.routes = [
            "–ú–æ—Å–∫–≤–∞ - –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
            "–ú–æ—Å–∫–≤–∞ - –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", 
            "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ - –°–æ—á–∏",
            "–ö–∞–∑–∞–Ω—å - –ú–æ—Å–∫–≤–∞",
            "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫ - –ú–æ—Å–∫–≤–∞",
            "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫ - –ú–æ—Å–∫–≤–∞",
            "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥ - –ú–æ—Å–∫–≤–∞"
        ]
        self.stations = [
            "–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–°–æ—á–∏", "–ö–∞–∑–∞–Ω—å",
            "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫", "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥", "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥",
            "–°–∞–º–∞—Ä–∞", "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É", "–£—Ñ–∞", "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", "–ü–µ—Ä–º—å"
        ]
        self.problems = [
            "–æ–ø–æ–∑–¥–∞–Ω–∏–µ", "–ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ", "–ø–æ–ª–æ–º–∫–∞", "–ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è",
            "—Ä–µ–º–æ–Ω—Ç –ø—É—Ç–∏", "–∫–∞—Ä–∞–Ω—Ç–∏–Ω", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã"
        ]
    
    def start_session(self, peer_id: int, user_id: int) -> str:
        if peer_id in self.sessions:
            return "‚ùå –ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ"
        
        session = ConductorSession(peer_id=peer_id, user_id=user_id, is_active=True)
        self.sessions[peer_id] = session
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–µ–∑–¥
        train = self._generate_train()
        session.current_train = train
        
        return (
            f"üöÇ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≤–æ–¥–Ω–∏—Ü—ã –†–ñ–î!\n\n"
            f"–ü–æ–µ–∑–¥ ‚Ññ{train.number}\n"
            f"–ú–∞—Ä—à—Ä—É—Ç: {train.route}\n"
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {train.departure}\n"
            f"–ü—Ä–∏–±—ã—Ç–∏–µ: {train.arrival}\n"
            f"–°—Ç–∞—Ç—É—Å: {train.status.value}\n"
            f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {train.platform}\n"
            f"–ü–∞—Å—Å–∞–∂–∏—Ä—ã: {train.passengers}\n\n"
            f"–ß—Ç–æ –¥–µ–ª–∞–µ–º? (–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∏–ª–µ—Ç—ã, –ø–æ–º–æ—á—å –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º, —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã)"
        )
    
    def _generate_train(self) -> Train:
        route = random.choice(self.routes)
        dep, arr = route.split(" - ")
        
        status = random.choice(list(TrainStatus))
        delay = random.randint(0, 120) if status == TrainStatus.DELAYED else 0
        
        problems = []
        if random.random() < 0.3:  # 30% —à–∞–Ω—Å –ø—Ä–æ–±–ª–µ–º
            problems = random.sample(self.problems, random.randint(1, 2))
        
        return Train(
            number=f"{random.randint(1, 999):03d}",
            route=route,
            departure=dep,
            arrival=arr,
            status=status,
            delay_minutes=delay,
            platform=str(random.randint(1, 20)),
            passengers=random.randint(50, 500),
            problems=problems
        )
    
    def handle_action(self, peer_id: int, action: str) -> str:
        if peer_id not in self.sessions:
            return "‚ùå –ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞. –ù–∞–ø–∏—à–∏ /conductor"
        
        session = self.sessions[peer_id]
        if not session.is_active:
            return "‚ùå –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
        
        train = session.current_train
        if not train:
            return "‚ùå –û—à–∏–±–∫–∞: –ø–æ–µ–∑–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        if action == "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∏–ª–µ—Ç—ã":
            return self._check_tickets(session, train)
        elif action == "–ø–æ–º–æ—á—å –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º":
            return self._help_passengers(session, train)
        elif action == "—Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã":
            return self._solve_problems(session, train)
        elif action == "—Å–ª–µ–¥—É—é—â–∏–π –ø–æ–µ–∑–¥":
            return self._next_train(session)
        elif action == "–∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É":
            return self._end_shift(session)
        else:
            return (
                f"‚ùì –ù–µ–ø–æ–Ω—è—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
                f"‚Ä¢ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∏–ª–µ—Ç—ã\n"
                f"‚Ä¢ –ø–æ–º–æ—á—å –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º\n"
                f"‚Ä¢ —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã\n"
                f"‚Ä¢ —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–µ–∑–¥\n"
                f"‚Ä¢ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É"
            )
    
    def _check_tickets(self, session: ConductorSession, train: Train) -> str:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–ª–µ—Ç–æ–≤
        score_gain = random.randint(5, 15)
        session.score += score_gain
        session.trains_handled += 1
        
        # –°–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∏–ª–µ—Ç–æ–≤
        events = [
            "–í—Å–µ –ø–∞—Å—Å–∞–∂–∏—Ä—ã –∏–º–µ—é—Ç –¥–µ–π—Å—Ç–≤—É—é—â–∏–µ –±–∏–ª–µ—Ç—ã ‚úÖ",
            "–ù–∞—à–ª–∏ –±–µ–∑–±–∏–ª–µ—Ç–Ω–∏–∫–∞, –Ω–æ –æ–Ω –∫—É–ø–∏–ª –±–∏–ª–µ—Ç ‚úÖ",
            "–ü–∞—Å—Å–∞–∂–∏—Ä –ø–æ—Ç–µ—Ä—è–ª –±–∏–ª–µ—Ç, –ø–æ–º–æ–≥–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ‚úÖ",
            "–ü—Ä–æ–≤–µ—Ä–∏–ª–∏ –±–∏–ª–µ—Ç—ã —É VIP-–ø–∞—Å—Å–∞–∂–∏—Ä–∞ ‚úÖ",
            "–û–±–Ω–∞—Ä—É–∂–∏–ª–∏ –ø–æ–¥–¥–µ–ª—å–Ω—ã–π –±–∏–ª–µ—Ç, –ø–∞—Å—Å–∞–∂–∏—Ä –∫—É–ø–∏–ª –Ω–æ–≤—ã–π ‚úÖ"
        ]
        event = random.choice(events)
        
        return (
            f"üé´ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–ª–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"{event}\n"
            f"üí∞ +{score_gain} –æ—á–∫–æ–≤\n"
            f"üìä –û–±—â–∏–π —Å—á—ë—Ç: {session.score}"
        )
    
    def _help_passengers(self, session: ConductorSession, train: Train) -> str:
        # –ü–æ–º–æ—â—å –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º
        help_count = random.randint(3, 8)
        score_gain = help_count * 2
        session.score += score_gain
        session.passengers_helped += help_count
        
        # –°–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –ø–æ–º–æ—â–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º
        events = [
            f"–ü–æ–º–æ–≥–ª–∏ {help_count} –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º —Å –±–∞–≥–∞–∂–æ–º ü§ù",
            f"–û–±—ä—è—Å–Ω–∏–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–µ–∑–¥–æ–≤ {help_count} –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º ü§ù", 
            f"–ù–∞—à–ª–∏ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –≤–µ—â–∏ –¥–ª—è {help_count} –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ ü§ù",
            f"–ü–æ–º–æ–≥–ª–∏ {help_count} –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º —Å –¥–µ—Ç—å–º–∏ ü§ù",
            f"–û–∫–∞–∑–∞–ª–∏ –ø–µ—Ä–≤—É—é –ø–æ–º–æ—â—å {help_count} –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º üè•"
        ]
        event = random.choice(events)
        
        return (
            f"üë• –ü–æ–º–æ—â—å –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º –æ–∫–∞–∑–∞–Ω–∞!\n"
            f"{event}\n"
            f"üí∞ +{score_gain} –æ—á–∫–æ–≤\n"
            f"üìä –û–±—â–∏–π —Å—á—ë—Ç: {session.score}"
        )
    
    def _solve_problems(self, session: ConductorSession, train: Train) -> str:
        if not train.problems:
            return "‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ—Ç, –ø–æ–µ–∑–¥ –∏–¥—ë—Ç –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é!"
        
        # –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
        solved = random.randint(1, len(train.problems))
        score_gain = solved * 10
        session.score += score_gain
        session.problems_solved += solved
        
        return (
            f"üîß –ü—Ä–æ–±–ª–µ–º—ã —Ä–µ—à–µ–Ω—ã!\n"
            f"‚úÖ –†–µ—à–∏–ª–∏ {solved} –∏–∑ {len(train.problems)} –ø—Ä–æ–±–ª–µ–º\n"
            f"üí∞ +{score_gain} –æ—á–∫–æ–≤\n"
            f"üìä –û–±—â–∏–π —Å—á—ë—Ç: {session.score}"
        )
    
    def _next_train(self, session: ConductorSession) -> str:
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–µ–∑–¥—É
        train = self._generate_train()
        session.current_train = train
        
        return (
            f"üöÇ –°–ª–µ–¥—É—é—â–∏–π –ø–æ–µ–∑–¥!\n\n"
            f"–ü–æ–µ–∑–¥ ‚Ññ{train.number}\n"
            f"–ú–∞—Ä—à—Ä—É—Ç: {train.route}\n"
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {train.departure}\n"
            f"–ü—Ä–∏–±—ã—Ç–∏–µ: {train.arrival}\n"
            f"–°—Ç–∞—Ç—É—Å: {train.status.value}\n"
            f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {train.platform}\n"
            f"–ü–∞—Å—Å–∞–∂–∏—Ä—ã: {train.passengers}\n"
            f"–ü—Ä–æ–±–ª–µ–º—ã: {', '.join(train.problems) if train.problems else '–Ω–µ—Ç'}"
        )
    
    def _end_shift(self, session: ConductorSession) -> str:
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ–Ω—ã
        duration = int(time.time() - session.start_time) // 60
        session.is_active = False
        
        total_score = session.score
        bonus = session.trains_handled * 5 + session.passengers_helped * 2 + session.problems_solved * 10
        
        final_score = total_score + bonus
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —ç–∫–æ–Ω–æ–º–∏–∫—É
        try:
            from economy_social import economy_manager
            economy_manager.add_money(session.user_id, final_score // 10)  # 10% –æ—Ç –æ—á–∫–æ–≤ –≤ –º–æ–Ω–µ—Ç—ã
        except Exception:
            pass
        
        result = (
            f"üèÅ –°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–µ–∑–¥–æ–≤: {session.trains_handled}\n"
            f"‚Ä¢ –ü–æ–º–æ–≥–ª–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º: {session.passengers_helped}\n"
            f"‚Ä¢ –†–µ—à–∏–ª–∏ –ø—Ä–æ–±–ª–µ–º: {session.problems_solved}\n"
            f"‚Ä¢ –í—Ä–µ–º—è —Å–º–µ–Ω—ã: {duration} –º–∏–Ω\n\n"
            f"üí∞ –ò—Ç–æ–≥–æ–≤—ã–π —Å—á—ë—Ç: {final_score}\n"
            f"üéØ –ë–æ–Ω—É—Å –∑–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: +{bonus}\n"
            f"ü™ô –ü–æ–ª—É—á–µ–Ω–æ –º–æ–Ω–µ—Ç: {final_score // 10}"
        )
        
        # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        del self.sessions[session.peer_id]
        
        return result


# -------- –®–∞—Ö–º–∞—Ç—ã --------
@dataclass
class ChessGame:
    game_id: str
    white_player: int
    black_player: int
    current_turn: int  # white_player –∏–ª–∏ black_player
    board: List[List[str]] = field(default_factory=lambda: [
        ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'],
        ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],
        ['', '', '', '', '', '', '', ''],
        ['', '', '', '', '', '', '', ''],
        ['', '', '', '', '', '', '', ''],
        ['', '', '', '', '', '', '', ''],
        ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],
        ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R']
    ])
    move_history: List[str] = field(default_factory=list)
    start_time: float = field(default_factory=time.time)
    is_active: bool = True
    winner: Optional[int] = None

class ChessManager:
    def __init__(self):
        self.games: Dict[str, ChessGame] = {}
        self.game_counter = 1
    
    def create_game(self, white_player: int, black_player: int) -> str:
        game_id = f"chess_{self.game_counter}"
        self.game_counter += 1
        
        game = ChessGame(
            game_id=game_id,
            white_player=white_player,
            black_player=black_player,
            current_turn=white_player
        )
        
        self.games[game_id] = game
        return f"‚ôüÔ∏è –®–∞—Ö–º–∞—Ç–Ω–∞—è –ø–∞—Ä—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∞!\n\n–ë–µ–ª—ã–µ: {white_player}\n–ß—ë—Ä–Ω—ã–µ: {black_player}\n\n–•–æ–¥ –±–µ–ª—ã—Ö. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'e2e4'"
    
    def make_move(self, game_id: str, player_id: int, move: str) -> str:
        if game_id not in self.games:
            return "‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        game = self.games[game_id]
        if not game.is_active:
            return "‚ùå –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
        
        if player_id != game.current_turn:
            return "‚ùå –ù–µ –≤–∞—à —Ö–æ–¥"
        
        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ö–æ–¥–∞
        if len(move) != 4 or not move.isalpha():
            return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ö–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'e2e4'"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        from_pos, to_pos = move[:2], move[2:]
        if not (from_pos[0] in 'abcdefgh' and from_pos[1] in '12345678' and 
                to_pos[0] in 'abcdefgh' and to_pos[1] in '12345678'):
            return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—É–∫–≤—ã a-h –∏ —Ü–∏—Ñ—Ä—ã 1-8"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ö–æ–¥ –≤ –∏—Å—Ç–æ—Ä–∏—é
        game.move_history.append(move)
        
        # –ü–µ—Ä–µ–¥–∞—ë–º —Ö–æ–¥
        game.current_turn = game.black_player if game.current_turn == game.white_player else game.white_player
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
        if len(game.move_history) >= 20:
            game.is_active = False
            game.winner = player_id
            duration = int(time.time() - game.start_time)
            
            # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —ç–∫–æ–Ω–æ–º–∏–∫–æ–π
            try:
                from economy_social import economy_manager
                economy_manager.add_money(player_id, 50)  # 50 –º–æ–Ω–µ—Ç –∑–∞ –ø–æ–±–µ–¥—É
            except Exception:
                pass
            
            return f"‚ôüÔ∏è –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\nüèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {game.winner}\nüìä –•–æ–¥–æ–≤: {len(game.move_history)}\n‚è±Ô∏è –í—Ä–µ–º—è: {duration} —Å–µ–∫\nü™ô –ü–æ–ª—É—á–µ–Ω–æ –º–æ–Ω–µ—Ç: 50"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
        board_str = self.get_board(game_id)
        return f"‚úÖ –•–æ–¥ {move} —Å–¥–µ–ª–∞–Ω!\n–•–æ–¥ {'—á—ë—Ä–Ω—ã—Ö' if game.current_turn == game.black_player else '–±–µ–ª—ã—Ö'}\n\n{board_str}"
    
    def get_board(self, game_id: str) -> str:
        if game_id not in self.games:
            return "‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        game = self.games[game_id]
        board_str = "‚ôüÔ∏è –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è:\n\n"
        
        for i, row in enumerate(game.board):
            board_str += f"{8-i} "
            for piece in row:
                if piece == '':
                    board_str += "¬∑ "
                else:
                    board_str += f"{piece} "
            board_str += "\n"
        
        board_str += "  a b c d e f g h"
        return board_str

# -------- –ö—Ä–æ—Å—Å–≤–æ—Ä–¥—ã --------
@dataclass
class CrosswordGame:
    game_id: str
    player_id: int
    words: List[Dict[str, str]]  # [{"word": "–ü–†–ò–í–ï–¢", "clue": "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", "solved": False}]
    current_word_index: int = 0
    score: int = 0
    start_time: float = field(default_factory=time.time)
    is_active: bool = True

class CrosswordManager:
    def __init__(self):
        self.games: Dict[int, CrosswordGame] = {}
        self.word_sets = [
            [
                {"word": "–ü–†–ò–í–ï–¢", "clue": "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º"},
                {"word": "–ú–ê–®–ò–ù–ê", "clue": "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ"},
                {"word": "–ö–û–ú–ü–¨–Æ–¢–ï–†", "clue": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã"},
                {"word": "–ü–†–û–ì–†–ê–ú–ú–ò–†–û–í–ê–ù–ò–ï", "clue": "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º –¥–ª—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞"}
            ],
            [
                {"word": "–ò–ì–†–ê", "clue": "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–ª—è –¥–µ—Ç–µ–π –∏ –≤–∑—Ä–æ—Å–ª—ã—Ö"},
                {"word": "–ú–£–ó–´–ö–ê", "clue": "–ò—Å–∫—É—Å—Å—Ç–≤–æ –∑–≤—É–∫–æ–≤"},
                {"word": "–ö–ù–ò–ì–ê", "clue": "–ü–µ—á–∞—Ç–Ω–æ–µ –∏–∑–¥–∞–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º"},
                {"word": "–ü–†–ò–†–û–î–ê", "clue": "–û–∫—Ä—É–∂–∞—é—â–∏–π –º–∏—Ä"}
            ]
        ]
    
    def start_game(self, player_id: int) -> str:
        if player_id in self.games:
            return "‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞"
        
        word_set = random.choice(self.word_sets)
        game = CrosswordGame(
            game_id=f"crossword_{player_id}_{int(time.time())}",
            player_id=player_id,
            words=word_set.copy()
        )
        
        self.games[player_id] = game
        
        return f"üìù –ö—Ä–æ—Å—Å–≤–æ—Ä–¥ –Ω–∞—á–∞—Ç!\n\n–°–ª–æ–≤–æ 1: {game.words[0]['clue']}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç:"
    
    def guess_word(self, player_id: int, guess: str) -> str:
        if player_id not in self.games:
            return "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã"
        
        game = self.games[player_id]
        if not game.is_active:
            return "‚ùå –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
        
        current_word = game.words[game.current_word_index]
        
        if guess.upper() == current_word["word"]:
            current_word["solved"] = True
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ –∑–∞ —Å–ª–æ–≤–æ
            word_length = len(current_word["word"])
            base_score = word_length * 2  # 2 –æ—á–∫–∞ –∑–∞ –±—É–∫–≤—É
            time_bonus = max(0, 30 - (time.time() - game.start_time) // 10)  # –ë–æ–Ω—É—Å –∑–∞ —Å–∫–æ—Ä–æ—Å—Ç—å
            
            word_score = base_score + time_bonus
            game.score += word_score
            game.current_word_index += 1
            
            if game.current_word_index >= len(game.words):
                # –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                game.is_active = False
                duration = int(time.time() - game.start_time)
                
                # –§–∏–Ω–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã
                completion_bonus = 50  # –ë–æ–Ω—É—Å –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                speed_bonus = max(0, 100 - duration // 10)  # –ë–æ–Ω—É—Å –∑–∞ –æ–±—â—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
                final_score = game.score + completion_bonus + speed_bonus
                
                result = f"üéâ –ö—Ä–æ—Å—Å–≤–æ—Ä–¥ —Ä–µ—à—ë–Ω!\n\n"
                result += f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
                result += f"üí∞ –û—á–∫–∏: {final_score}\n"
                result += f"‚è±Ô∏è –í—Ä–µ–º—è: {duration} —Å–µ–∫\n"
                result += f"üìù –°–ª–æ–≤ –æ—Ç–≥–∞–¥–∞–Ω–æ: {len(game.words)}\n"
                result += f"üèÜ –ë–æ–Ω—É—Å –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: +{completion_bonus}\n"
                result += f"‚ö° –ë–æ–Ω—É—Å –∑–∞ —Å–∫–æ—Ä–æ—Å—Ç—å: +{speed_bonus}\n\n"
                result += f"–í—Å–µ —Å–ª–æ–≤–∞ –æ—Ç–≥–∞–¥–∞–Ω—ã!"
                
                # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —ç–∫–æ–Ω–æ–º–∏–∫–æ–π
                try:
                    from economy_social import economy_manager
                    economy_manager.add_money(player_id, final_score // 15)  # ~6.7% –æ—Ç –æ—á–∫–æ–≤ –≤ –º–æ–Ω–µ—Ç—ã
                    result += f"\nü™ô –ü–æ–ª—É—á–µ–Ω–æ –º–æ–Ω–µ—Ç: {final_score // 15}"
                except Exception:
                    pass
                
                # –û—á–∏—â–∞–µ–º –∏–≥—Ä—É
                del self.games[player_id]
                
                return result
            else:
                next_word = game.words[game.current_word_index]
                return f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! +{word_score} –æ—á–∫–æ–≤\n\n–°–ª–æ–≤–æ {game.current_word_index + 1}: {next_word['clue']}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç:"
        else:
            # –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            hint = self._get_hint(current_word["word"], guess)
            return f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.\n\n–ü–æ–¥—Å–∫–∞–∑–∫–∞: {current_word['clue']}\nüí° {hint}"
    
    def _get_hint(self, correct_word: str, guess: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        if len(guess) != len(correct_word):
            return f"–°–ª–æ–≤–æ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ {len(correct_word)} –±—É–∫–≤"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –±—É–∫–≤—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö
        correct_positions = sum(1 for i, (c1, c2) in enumerate(zip(guess.upper(), correct_word)) if c1 == c2)
        if correct_positions > 0:
            return f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –±—É–∫–≤ –Ω–∞ –º–µ—Å—Ç–µ: {correct_positions}"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–µ –±—É–∫–≤—ã
        common_letters = set(guess.upper()) & set(correct_word)
        if common_letters:
            return f"–û–±—â–∏–µ –±—É–∫–≤—ã: {', '.join(sorted(common_letters))}"
        
        return "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ"

# -------- –ü–æ–∫–µ—Ä --------
class PokerHand(Enum):
    HIGH_CARD = "—Å—Ç–∞—Ä—à–∞—è –∫–∞—Ä—Ç–∞"
    PAIR = "–ø–∞—Ä–∞"
    TWO_PAIR = "–¥–≤–µ –ø–∞—Ä—ã"
    THREE_OF_KIND = "—Ç—Ä–æ–π–∫–∞"
    STRAIGHT = "—Å—Ç—Ä–∏—Ç"
    FLUSH = "—Ñ–ª–µ—à"
    FULL_HOUSE = "—Ñ—É–ª–ª-—Ö–∞—É—Å"
    FOUR_OF_KIND = "–∫–∞—Ä–µ"
    STRAIGHT_FLUSH = "—Å—Ç—Ä–∏—Ç-—Ñ–ª–µ—à"
    ROYAL_FLUSH = "—Ä–æ—è–ª-—Ñ–ª–µ—à"


@dataclass
class Card:
    suit: str
    rank: str
    value: int


@dataclass
class PokerPlayer:
    user_id: int
    name: str
    chips: int = 1000
    hand: List[Card] = field(default_factory=list)
    bet: int = 0
    folded: bool = False
    is_all_in: bool = False


@dataclass
class PokerGame:
    peer_id: int
    players: Dict[int, PokerPlayer] = field(default_factory=dict)
    deck: List[Card] = field(default_factory=list)
    pot: int = 0
    current_bet: int = 0
    dealer: int = 0
    is_active: bool = False
    round: str = "preflop"  # preflop, flop, turn, river
    community_cards: List[Card] = field(default_factory=list)


class PokerGameManager:
    def __init__(self):
        self.games: Dict[int, PokerGame] = {}
        self.suits = ["‚ô†", "‚ô•", "‚ô¶", "‚ô£"]
        self.ranks = ["2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K", "A"]
    
    def create_game(self, peer_id: int, creator_id: int, creator_name: str) -> str:
        if peer_id in self.games:
            return "‚ùå –ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ"
        
        game = PokerGame(peer_id=peer_id)
        game.players[creator_id] = PokerPlayer(user_id=creator_id, name=creator_name)
        game.is_active = True
        self.games[peer_id] = game
        
        return (
            f"üÉè –ü–æ–∫–µ—Ä-—Å—Ç–æ–ª —Å–æ–∑–¥–∞–Ω!\n"
            f"üë§ –ò–≥—Ä–æ–∫: {creator_name}\n"
            f"üí∞ –§–∏—à–∫–∏: 1000\n\n"
            f"–î—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /poker join"
        )
    
    def join_game(self, peer_id: int, user_id: int, name: str) -> str:
        if peer_id not in self.games:
            return "‚ùå –ò–≥—Ä–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞. –°–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /poker create"
        
        game = self.games[peer_id]
        if user_id in game.players:
            return "‚ùå –í—ã —É–∂–µ –≤ –∏–≥—Ä–µ"
        
        if len(game.players) >= 8:
            return "‚ùå –ú–∞–∫—Å–∏–º—É–º 8 –∏–≥—Ä–æ–∫–æ–≤"
        
        game.players[user_id] = PokerPlayer(user_id=user_id, name=name)
        
        result = f"‚úÖ {name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!\n"
        result += f"üë• –ò–≥—Ä–æ–∫–æ–≤: {len(game.players)}\n"
        result += f"üí∞ –§–∏—à–∫–∏: 1000\n\n"
        
        if len(game.players) >= 2:
            result += "üéÆ –ò–≥—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ –Ω–∞—á–∞–ª—É!\n"
            result += "–ö–æ–º–∞–Ω–¥–∞: /poker start"
        else:
            result += "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤... (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2)"
        
        return result
    
    def start_game(self, peer_id: int) -> str:
        if peer_id not in self.games:
            return "‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        game = self.games[peer_id]
        if len(game.players) < 2:
            return "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2"
        
        # –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É
        game.is_active = True
        game.round = "preflop"
        game.deal_cards()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–ª–µ—Ä–∞ –∏ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        player_ids = list(game.players.keys())
        game.dealer = player_ids[0]
        game.current_player = player_ids[1] if len(player_ids) > 1 else player_ids[0]
        
        result = "üéÆ –ü–æ–∫–µ—Ä –Ω–∞—á–∞–ª—Å—è!\n\n"
        result += f"–î–∏–ª–µ—Ä: {game.players[game.dealer].name}\n"
        result += f"–¢–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫: {game.players[game.current_player].name}\n"
        result += f"–§–∞–∑–∞: {game.round}\n"
        result += f"–ë–∞–Ω–∫: {game.pot} ü™ô\n\n"
        result += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
        result += "‚Ä¢ /poker bet <—Å—É–º–º–∞> - —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É\n"
        result += "‚Ä¢ /poker call - —É—Ä–∞–≤–Ω—è—Ç—å —Å—Ç–∞–≤–∫—É\n"
        result += "‚Ä¢ /poker fold - —Å–±—Ä–æ—Å–∏—Ç—å –∫–∞—Ä—Ç—ã\n"
        result += "‚Ä¢ /poker check - –ø–∞—Å (–µ—Å–ª–∏ –Ω–µ—Ç —Å—Ç–∞–≤–æ–∫)\n"
        result += "‚Ä¢ /poker show - –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—ã\n"
        
        return result
    
    def deal_cards(self, peer_id: int) -> str:
        """–†–∞–∑–¥–∞—á–∞ –∫–∞—Ä—Ç"""
        if peer_id not in self.games:
            return "‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        game = self.games[peer_id]
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–¥—É
        game.deck = []
        for suit in self.suits:
            for rank in self.ranks:
                game.deck.append(Card(suit=suit, rank=rank))
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º
        random.shuffle(game.deck)
        
        # –†–∞–∑–¥–∞–µ–º –ø–æ 2 –∫–∞—Ä—Ç—ã –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É
        for player in game.players.values():
            player.cards = [game.deck.pop(), game.deck.pop()]
        
        return "üÉè –ö–∞—Ä—Ç—ã —Ä–∞–∑–¥–∞–Ω—ã!"
    
    def make_action(self, peer_id: int, player_id: int, action: str, amount: int = 0) -> str:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –ø–æ–∫–µ—Ä–µ"""
        if peer_id not in self.games:
            return "‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        game = self.games[peer_id]
        if not game.is_active:
            return "‚ùå –ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞"
        
        if player_id != game.current_player:
            return "‚ùå –ù–µ –≤–∞—à —Ö–æ–¥"
        
        player = game.players[player_id]
        
        if action == "fold":
            player.folded = True
            result = f"‚ùå {player.name} —Å–±—Ä–æ—Å–∏–ª –∫–∞—Ä—Ç—ã"
        elif action == "check":
            if game.current_bet > 0:
                return "‚ùå –ù–µ–ª—å–∑—è –ø–∞—Å–æ–≤–∞—Ç—å –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Å—Ç–∞–≤–æ–∫"
            result = f"‚úÖ {player.name} –ø–∞—Å—É–µ—Ç"
        elif action == "call":
            if game.current_bet == 0:
                return "‚ùå –ù–µ—Ç —Å—Ç–∞–≤–æ–∫ –¥–ª—è —É—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è"
            if player.chips < game.current_bet:
                return "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∏—à–µ–∫"
            player.chips -= game.current_bet
            game.pot += game.current_bet
            result = f"‚úÖ {player.name} —É—Ä–∞–≤–Ω—è–ª —Å—Ç–∞–≤–∫—É {game.current_bet} ü™ô"
        elif action == "bet":
            if amount <= game.current_bet:
                return "‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π"
            if player.chips < amount:
                return "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∏—à–µ–∫"
            player.chips -= amount
            game.pot += amount
            game.current_bet = amount
            result = f"üí∞ {player.name} –ø–æ—Å—Ç–∞–≤–∏–ª {amount} ü™ô"
        else:
            return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
        
        # –ü–µ—Ä–µ–¥–∞–µ–º —Ö–æ–¥ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
        self._next_player(game)
        
        return result
    
    def _next_player(self, game: PokerGame) -> None:
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É"""
        player_ids = [pid for pid, player in game.players.items() if not player.folded]
        
        if len(player_ids) <= 1:
            # –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            self._end_game(game)
            return
        
        current_index = player_ids.index(game.current_player)
        next_index = (current_index + 1) % len(player_ids)
        game.current_player = player_ids[next_index]


# -------- –®–∞—Ö–º–∞—Ç—ã --------
class ChessPiece(Enum):
    PAWN = "‚ôü"
    ROOK = "‚ôú"
    KNIGHT = "‚ôû"
    BISHOP = "‚ôù"
    QUEEN = "‚ôõ"
    KING = "‚ôö"


@dataclass
class ChessMove:
    from_pos: str
    to_pos: str
    piece: ChessPiece
    is_capture: bool = False
    is_check: bool = False
    is_checkmate: bool = False


@dataclass
class ChessGame:
    peer_id: int
    white_player: int
    black_player: int
    current_turn: int
    board: List[List[Optional[Tuple[ChessPiece, bool]]]] = field(default_factory=list)  # (piece, is_white)
    move_history: List[ChessMove] = field(default_factory=list)
    is_active: bool = False
    winner: Optional[int] = None


# -------- –í–∏—Å–µ–ª–∏—Ü–∞ --------
@dataclass
class HangmanGame:
    peer_id: int
    word: str
    guessed_letters: Set[str] = field(default_factory=set)
    wrong_guesses: int = 0
    max_wrong: int = 6
    is_active: bool = False
    start_time: float = field(default_factory=time.time)


class HangmanManager:
    def __init__(self):
        self.games: Dict[int, HangmanGame] = {}
        self.words = [
            "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–∫–æ–º–ø—å—é—Ç–µ—Ä", "–∞–ª–≥–æ—Ä–∏—Ç–º", "–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö",
            "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "—Å–µ—Ä–≤–µ—Ä", "–∫–ª–∏–µ–Ω—Ç", "—Ñ—É–Ω–∫—Ü–∏—è", "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è",
            "–º–∞—Å—Å–∏–≤", "–æ–±—ä–µ–∫—Ç", "–∫–ª–∞—Å—Å", "–º–µ—Ç–æ–¥", "–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"
        ]
    
    def start_game(self, peer_id: int) -> str:
        if peer_id in self.games:
            return "‚ùå –ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ"
        
        word = random.choice(self.words)
        game = HangmanGame(peer_id=peer_id, word=word, is_active=True)
        self.games[peer_id] = game
        
        return (
            f"üéØ –í–∏—Å–µ–ª–∏—Ü–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n\n"
            f"–°–ª–æ–≤–æ: {'_' * len(word)}\n"
            f"–ë—É–∫–≤: {len(word)}\n"
            f"–û—à–∏–±–æ–∫: 0/{game.max_wrong}\n\n"
            f"–£–≥–∞–¥—ã–≤–∞–π—Ç–µ –±—É–∫–≤—ã –ø–æ –æ–¥–Ω–æ–π!"
        )
    
    def guess_letter(self, peer_id: int, letter: str) -> str:
        if peer_id not in self.games:
            return "‚ùå –ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞"
        
        game = self.games[peer_id]
        if not game.is_active:
            return "‚ùå –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
        
        letter = letter.lower()
        if len(letter) != 1:
            return "‚ùå –£–≥–∞–¥—ã–≤–∞–π—Ç–µ –ø–æ –æ–¥–Ω–æ–π –±—É–∫–≤–µ"
        
        if letter in game.guessed_letters:
            return "‚ùå –≠—Ç–∞ –±—É–∫–≤–∞ —É–∂–µ –±—ã–ª–∞"
        
        game.guessed_letters.add(letter)
        
        if letter in game.word:
            # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –±—É–∫–≤–∞
            if self._is_word_guessed(game):
                return self._end_game(game, True)
            else:
                return self._get_game_status(game)
        else:
            # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –±—É–∫–≤–∞
            game.wrong_guesses += 1
            if game.wrong_guesses >= game.max_wrong:
                return self._end_game(game, False)
            else:
                return self._get_game_status(game)
    
    def _is_word_guessed(self, game: HangmanGame) -> bool:
        return all(letter in game.guessed_letters for letter in game.word)
    
    def _get_game_status(self, game: HangmanGame) -> str:
        display_word = ""
        for letter in game.word:
            if letter in game.guessed_letters:
                display_word += letter
            else:
                display_word += "_"
        
        return (
            f"üéØ –°–ª–æ–≤–æ: {display_word}\n"
            f"–£–≥–∞–¥–∞–Ω–Ω—ã–µ –±—É–∫–≤—ã: {', '.join(sorted(game.guessed_letters))}\n"
            f"–û—à–∏–±–æ–∫: {game.wrong_guesses}/{game.max_wrong}\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {game.max_wrong - game.wrong_guesses}"
        )
    
    def _end_game(self, game: HangmanGame, won: bool) -> str:
        game.is_active = False
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ—á–∫–∏
        duration = int(time.time() - game.start_time)
        base_score = 100 if won else 10
        time_bonus = max(0, 60 - duration)  # –ë–æ–Ω—É—Å –∑–∞ —Å–∫–æ—Ä–æ—Å—Ç—å
        accuracy_bonus = max(0, 50 - game.wrong_guesses * 10)  # –ë–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–æ—Å—Ç—å
        
        total_score = base_score + time_bonus + accuracy_bonus
        
        if won:
            result = f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –°–ª–æ–≤–æ —É–≥–∞–¥–∞–Ω–æ: {game.word}\n\n"
            result += f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
            result += f"üí∞ –û—á–∫–∏: {total_score}\n"
            result += f"‚è±Ô∏è –í—Ä–µ–º—è: {duration} —Å–µ–∫\n"
            result += f"üéØ –û—à–∏–±–æ–∫: {game.wrong_guesses}\n"
            result += f"‚ö° –ë–æ–Ω—É—Å –∑–∞ —Å–∫–æ—Ä–æ—Å—Ç—å: +{time_bonus}\n"
            result += f"üéØ –ë–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–æ—Å—Ç—å: +{accuracy_bonus}"
        else:
            result = f"üíÄ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –°–ª–æ–≤–æ –±—ã–ª–æ: {game.word}\n\n"
            result += f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
            result += f"üí∞ –û—á–∫–∏: {total_score}\n"
            result += f"‚è±Ô∏è –í—Ä–µ–º—è: {duration} —Å–µ–∫\n"
            result += f"üéØ –û—à–∏–±–æ–∫: {game.wrong_guesses}"
        
        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —ç–∫–æ–Ω–æ–º–∏–∫–æ–π
        try:
            from economy_social import economy_manager
            economy_manager.add_money(game.peer_id, total_score // 20)  # 5% –æ—Ç –æ—á–∫–æ–≤ –≤ –º–æ–Ω–µ—Ç—ã
            result += f"\nü™ô –ü–æ–ª—É—á–µ–Ω–æ –º–æ–Ω–µ—Ç: {total_score // 20}"
        except Exception:
            pass
        
        # –û—á–∏—â–∞–µ–º –∏–≥—Ä—É
        del self.games[game.peer_id]
        
        return result


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∏–≥—Ä
conductor_game = ConductorGame()
poker_manager = PokerGameManager()
hangman_manager = HangmanManager()
chess_manager = ChessManager()
crossword_manager = CrosswordManager()