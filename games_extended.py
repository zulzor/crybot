"""
–ò–≥—Ä—ã –¥–ª—è CryBot —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º UX –∏ inline-–∫–Ω–æ–ø–∫–∞–º–∏
"""
import random
import time
from dataclasses import dataclass, field
from typing import Dict, List, Optional, Any, Tuple
from enum import Enum


# -------- –ë–∞–∑–æ–≤—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –∏–≥—Ä --------
@dataclass
class GameAction:
    """–î–µ–π—Å—Ç–≤–∏–µ –≤ –∏–≥—Ä–µ —Å –∫–Ω–æ–ø–∫–æ–π"""
    label: str
    emoji: str
    next_state: str
    command: str  # –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏


@dataclass
class GameState:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã"""
    state_id: str
    title: str
    description: str
    actions: List[GameAction]
    progress_text: str = ""
    show_progress_bar: bool = False


@dataclass
class GameSession:
    """–°–µ—Å—Å–∏—è –∏–≥—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id: int
    peer_id: int
    game_type: str
    current_state: str
    start_time: float = field(default_factory=time.time)
    data: Dict[str, Any] = field(default_factory=dict)  # –∏–≥—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    is_active: bool = True


class GameEngine:
    """–î–≤–∏–∂–æ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–∞–º–∏"""
    
    def __init__(self):
        self.sessions: Dict[str, GameSession] = {}
        self.games: Dict[str, Dict[str, GameState]] = {}
        self._init_games()
    
    def _init_games(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∏–≥—Ä"""
        self._init_conductor_game()
        self._init_hangman_game()
        self._init_poker_game()
    
    def _init_conductor_game(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã '–ü—Ä–æ–≤–æ–¥–Ω–∏—Ü–∞ –†–ñ–î'"""
        self.games["conductor"] = {
            "welcome": GameState(
                state_id="welcome",
                title="üöÇ –ü—Ä–æ–≤–æ–¥–Ω–∏—Ü–∞ –†–ñ–î",
                description="–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ '–ü—Ä–æ–≤–æ–¥–Ω–∏—Ü–∞ –†–ñ–î' ‚Äî –ø–æ–º–æ–≥–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º –∏ —Å–æ—Ö—Ä–∞–Ω–∏ –ø–æ–µ–∑–¥. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                actions=[
                    GameAction("–ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É", "üöÇ", "on_duty", "start_shift"),
                    GameAction("–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã", "üìñ", "rules", "show_rules")
                ]
            ),
            "rules": GameState(
                state_id="rules",
                title="üìñ –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã",
                description="""üéØ –¶–µ–ª—å: –ü–æ–º–æ–≥–∞–π –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º –∏ –ø—Ä–æ–≤–µ—Ä—è–π –±–∏–ª–µ—Ç—ã
‚è±Ô∏è –í—Ä–µ–º—è: 5 –ø–æ–µ–∑–¥–æ–≤ –∑–∞ —Å–º–µ–Ω—É
üí∞ –ù–∞–≥—Ä–∞–¥–∞: –û—á–∫–∏ –∑–∞ –∫–∞–∂–¥—ã–π –ø–æ–µ–∑–¥
üèÜ –ë–æ–Ω—É—Å: –ó–∞ –±—ã—Å—Ç—Ä—É—é –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É""",
                actions=[
                    GameAction("–ù–∞—á–∞—Ç—å –∏–≥—Ä—É", "üöÇ", "on_duty", "start_shift"),
                    GameAction("–ù–∞–∑–∞–¥", "‚¨ÖÔ∏è", "welcome", "back")
                ]
            ),
            "on_duty": GameState(
                state_id="on_duty",
                title="üöÇ –ü—Ä–æ–≤–æ–¥–Ω–∏—Ü–∞ –†–ñ–î",
                description="–¢—ã –Ω–∞ –ø–æ–µ–∑–¥–µ. –ü–∞—Å—Å–∞–∂–∏—Ä—ã –∑–∞—Ö–æ–¥—è—Ç –≤ –≤–∞–≥–æ–Ω. –ß—Ç–æ –¥–µ–ª–∞–µ—à—å?",
                actions=[
                    GameAction("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∏–ª–µ—Ç—ã", "üé´", "check_tickets", "check_tickets"),
                    GameAction("–ü–æ–º–æ—á—å –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º", "ü§ù", "help_passengers", "help_passengers"),
                    GameAction("–†–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã", "üîß", "solve_problems", "solve_problems"),
                    GameAction("–°–ª–µ–¥—É—é—â–∏–π –ø–æ–µ–∑–¥", "‚û°Ô∏è", "next_train", "next_train")
                ],
                progress_text="–ü–æ–µ–∑–¥ {current_train} –∏–∑ {total_trains}",
                show_progress_bar=True
            ),
            "check_tickets": GameState(
                state_id="check_tickets",
                title="üé´ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–ª–µ—Ç–æ–≤",
                description="–ü—Ä–æ–≤–µ—Ä—è–µ—à—å –±–∏–ª–µ—Ç—ã —É –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤...",
                actions=[
                    GameAction("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "‚û°Ô∏è", "on_duty", "continue"),
                    GameAction("–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É", "üèÅ", "end_shift", "end_shift")
                ]
            ),
            "help_passengers": GameState(
                state_id="help_passengers",
                title="ü§ù –ü–æ–º–æ—â—å –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º",
                description="–ü–æ–º–æ–≥–∞–µ—à—å –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º —Å –±–∞–≥–∞–∂–æ–º –∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏...",
                actions=[
                    GameAction("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "‚û°Ô∏è", "on_duty", "continue"),
                    GameAction("–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É", "üèÅ", "end_shift", "end_shift")
                ]
            ),
            "solve_problems": GameState(
                state_id="solve_problems",
                title="üîß –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º",
                description="–†–µ—à–∞–µ—à—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–º –∏ –æ—Å–≤–µ—â–µ–Ω–∏–µ–º...",
                actions=[
                    GameAction("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "‚û°Ô∏è", "on_duty", "continue"),
                    GameAction("–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É", "üèÅ", "end_shift", "end_shift")
                ]
            ),
            "next_train": GameState(
                state_id="next_train",
                title="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –ø–æ–µ–∑–¥",
                description="–ü–µ—Ä–µ—Ö–æ–¥–∏—à—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–µ–∑–¥—É...",
                actions=[
                    GameAction("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "‚û°Ô∏è", "on_duty", "continue"),
                    GameAction("–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É", "üèÅ", "end_shift", "end_shift")
                ]
            ),
            "end_shift": GameState(
                state_id="end_shift",
                title="üèÅ –°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                description="–ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏ —Ç–≤–æ–µ–π —Ä–∞–±–æ—Ç—ã...",
                actions=[
                    GameAction("–ù–æ–≤–∞—è —Å–º–µ–Ω–∞", "üîÑ", "welcome", "new_shift"),
                    GameAction("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "üè†", "main_menu", "main_menu")
                ]
            )
        }
    
    def _init_hangman_game(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã '–í–∏—Å–µ–ª–∏—Ü–∞'"""
        self.games["hangman"] = {
            "welcome": GameState(
                state_id="welcome",
                title="üéØ –í–∏—Å–µ–ª–∏—Ü–∞",
                description="–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ '–í–∏—Å–µ–ª–∏—Ü–∞' ‚Äî —É–≥–∞–¥–∞–π —Å–ª–æ–≤–æ –ø–æ –±—É–∫–≤–∞–º. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                actions=[
                    GameAction("–ù–∞—á–∞—Ç—å –∏–≥—Ä—É", "üéØ", "playing", "start_game"),
                    GameAction("–ü—Ä–∞–≤–∏–ª–∞", "üìñ", "rules", "show_rules")
                ]
            ),
            "rules": GameState(
                state_id="rules",
                title="üìñ –ü—Ä–∞–≤–∏–ª–∞ –í–∏—Å–µ–ª–∏—Ü—ã",
                description="""üéØ –¶–µ–ª—å: –£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ –ø–æ –±—É–∫–≤–∞–º
‚ùå –û—à–∏–±–æ–∫: –ú–∞–∫—Å–∏–º—É–º 6
‚è±Ô∏è –í—Ä–µ–º—è: –ß–µ–º –±—ã—Å—Ç—Ä–µ–µ, —Ç–µ–º –±–æ–ª—å—à–µ –æ—á–∫–æ–≤
üí∞ –ù–∞–≥—Ä–∞–¥–∞: –û—á–∫–∏ –∑–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –∏ —Ç–æ—á–Ω–æ—Å—Ç—å""",
                actions=[
                    GameAction("–ù–∞—á–∞—Ç—å –∏–≥—Ä—É", "üéØ", "playing", "start_game"),
                    GameAction("–ù–∞–∑–∞–¥", "‚¨ÖÔ∏è", "welcome", "back")
                ]
            ),
            "playing": GameState(
                state_id="playing",
                title="üéØ –í–∏—Å–µ–ª–∏—Ü–∞",
                description="–£–≥–∞–¥—ã–≤–∞–π –±—É–∫–≤—ã! –°–ª–æ–≤–æ: {word_display}",
                actions=[
                    GameAction("–£–≥–∞–¥–∞—Ç—å –±—É–∫–≤—É", "üî§", "guess_letter", "guess_letter"),
                    GameAction("–°–¥–∞—Ç—å—Å—è", "üè≥Ô∏è", "game_over", "give_up")
                ],
                progress_text="–û—à–∏–±–æ–∫: {wrong_guesses}/6",
                show_progress_bar=True
            ),
            "guess_letter": GameState(
                state_id="guess_letter",
                title="üî§ –£–≥–∞–¥—ã–≤–∞–Ω–∏–µ –±—É–∫–≤—ã",
                description="–í–≤–µ–¥–∏ –±—É–∫–≤—É –¥–ª—è —É–≥–∞–¥—ã–≤–∞–Ω–∏—è...",
                actions=[
                    GameAction("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "‚û°Ô∏è", "playing", "continue"),
                    GameAction("–°–¥–∞—Ç—å—Å—è", "üè≥Ô∏è", "game_over", "give_up")
                ]
            ),
            "game_over": GameState(
                state_id="game_over",
                title="üèÅ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞",
                description="–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã...",
                actions=[
                    GameAction("–ù–æ–≤–∞—è –∏–≥—Ä–∞", "üîÑ", "welcome", "new_game"),
                    GameAction("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "üè†", "main_menu", "main_menu")
                ]
            )
        }
    
    def _init_poker_game(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã '–ü–æ–∫–µ—Ä'"""
        self.games["poker"] = {
            "welcome": GameState(
                state_id="welcome",
                title="üÉè –ü–æ–∫–µ—Ä",
                description="–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ '–ü–æ–∫–µ—Ä' ‚Äî —Å–æ–∑–¥–∞–π —Å—Ç–æ–ª –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Å—å –∫ –∏–≥—Ä–µ. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                actions=[
                    GameAction("–°–æ–∑–¥–∞—Ç—å —Å—Ç–æ–ª", "üÉè", "create_table", "create_table"),
                    GameAction("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", "‚ûï", "join_table", "join_table"),
                    GameAction("–ü—Ä–∞–≤–∏–ª–∞", "üìñ", "rules", "show_rules")
                ]
            ),
            "rules": GameState(
                state_id="rules",
                title="üìñ –ü—Ä–∞–≤–∏–ª–∞ –ü–æ–∫–µ—Ä–∞",
                description="""üÉè –¶–µ–ª—å: –°–æ–±—Ä–∞—Ç—å –ª—É—á—à—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∫–∞—Ä—Ç
üë• –ò–≥—Ä–æ–∫–æ–≤: 2-8 —á–µ–ª–æ–≤–µ–∫
üí∞ –°—Ç–∞–≤–∫–∏: –§–∏—à–∫–∏ –∑–∞ –¥–µ–π—Å—Ç–≤–∏—è
üèÜ –ü–æ–±–µ–¥–∞: –ü–æ—Å–ª–µ–¥–Ω–∏–π –∏–≥—Ä–æ–∫ —Å –∫–∞—Ä—Ç–∞–º–∏""",
                actions=[
                    GameAction("–°–æ–∑–¥–∞—Ç—å —Å—Ç–æ–ª", "üÉè", "create_table", "create_table"),
                    GameAction("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", "‚ûï", "join_table", "join_table"),
                    GameAction("–ù–∞–∑–∞–¥", "‚¨ÖÔ∏è", "welcome", "back")
                ]
            ),
            "create_table": GameState(
                state_id="create_table",
                title="üÉè –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–æ–ª–∞",
                description="–°—Ç–æ–ª —Å–æ–∑–¥–∞–Ω! –û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤...",
                actions=[
                    GameAction("–ù–∞—á–∞—Ç—å –∏–≥—Ä—É", "üéÆ", "playing", "start_game"),
                    GameAction("–û—Ç–º–µ–Ω–∏—Ç—å", "‚ùå", "welcome", "cancel")
                ]
            ),
            "join_table": GameState(
                state_id="join_table",
                title="‚ûï –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å—Ç–æ–ª—É",
                description="–í—ã–±–µ—Ä–∏ —Å—Ç–æ–ª –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...",
                actions=[
                    GameAction("–°—Ç–æ–ª #1", "üÉè", "playing", "join_1"),
                    GameAction("–°—Ç–æ–ª #2", "üÉè", "playing", "join_2"),
                    GameAction("–ù–∞–∑–∞–¥", "‚¨ÖÔ∏è", "welcome", "back")
                ]
            ),
            "playing": GameState(
                state_id="playing",
                title="üÉè –ü–æ–∫–µ—Ä",
                description="–¢–≤–æ–π —Ö–æ–¥! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                actions=[
                    GameAction("–°—Ç–∞–≤–∫–∞", "üí∞", "bet", "bet"),
                    GameAction("–ö–æ–ª–ª", "‚úÖ", "call", "call"),
                    GameAction("–§–æ–ª–¥", "‚ùå", "fold", "fold"),
                    GameAction("–ß–µ–∫", "ü§ù", "check", "check")
                ],
                progress_text="–ë–∞–Ω–∫: {pot} ü™ô | –¢–≤–æ–∏ —Ñ–∏—à–∫–∏: {chips}",
                show_progress_bar=True
            ),
            "bet": GameState(
                state_id="bet",
                title="üí∞ –°—Ç–∞–≤–∫–∞",
                description="–í–≤–µ–¥–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏...",
                actions=[
                    GameAction("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "‚û°Ô∏è", "playing", "continue"),
                    GameAction("–û—Ç–º–µ–Ω–∞", "‚ùå", "playing", "cancel")
                ]
            ),
            "game_over": GameState(
                state_id="game_over",
                title="üèÅ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞",
                description="–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã...",
                actions=[
                    GameAction("–ù–æ–≤–∞—è –∏–≥—Ä–∞", "üîÑ", "welcome", "new_game"),
                    GameAction("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "üè†", "main_menu", "main_menu")
                ]
            )
        }
    
    def start_game(self, user_id: int, peer_id: int, game_type: str) -> Tuple[str, List[Dict[str, str]]]:
        """–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"""
        session_id = f"{game_type}_{user_id}_{peer_id}"
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        session = GameSession(
            user_id=user_id,
            peer_id=peer_id,
            game_type=game_type,
            current_state="welcome"
        )
        self.sessions[session_id] = session
        
        return self._get_state_message(session_id)
    
    def handle_action(self, user_id: int, peer_id: int, game_type: str, command: str) -> Tuple[str, List[Dict[str, str]]]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∏–≥—Ä–µ"""
        session_id = f"{game_type}_{user_id}_{peer_id}"
        
        if session_id not in self.sessions:
            return "‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏ –Ω–æ–≤—É—é –∏–≥—Ä—É.", []
        
        session = self.sessions[session_id]
        if not session.is_active:
            return "‚ùå –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", []
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        result = self._process_command(session, command)
        
        return self._get_state_message(session_id)
    
    def _process_command(self, session: GameSession, command: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        game_type = session.game_type
        current_state = session.current_state
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∏–≥—Ä
        if game_type == "conductor":
            return self._process_conductor_command(session, command)
        elif game_type == "hangman":
            return self._process_hangman_command(session, command)
        elif game_type == "poker":
            return self._process_poker_command(session, command)
        
        return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
    
    def _process_conductor_command(self, session: GameSession, command: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ –∏–≥—Ä–µ '–ü—Ä–æ–≤–æ–¥–Ω–∏—Ü–∞ –†–ñ–î'"""
        if command == "start_shift":
            session.current_state = "on_duty"
            session.data["current_train"] = 1
            session.data["total_trains"] = 5
            session.data["passengers_helped"] = 0
            session.data["tickets_checked"] = 0
            session.data["problems_solved"] = 0
            return "‚úÖ –°–º–µ–Ω–∞ –Ω–∞—á–∞–ª–∞—Å—å! –¢—ã –Ω–∞ –ø–µ—Ä–≤–æ–º –ø–æ–µ–∑–¥–µ."
        
        elif command == "check_tickets":
            session.current_state = "check_tickets"
            session.data["tickets_checked"] += 1
            return "‚úÖ –ë–∏–ª–µ—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã! –í—Å–µ –ø–∞—Å—Å–∞–∂–∏—Ä—ã –¥–æ–≤–æ–ª—å–Ω—ã üòä"
        
        elif command == "help_passengers":
            session.current_state = "help_passengers"
            session.data["passengers_helped"] += 1
            return "‚úÖ –ü–æ–º–æ–≥ –ø–∞—Å—Å–∞–∂–∏—Ä—É! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å ü§ù"
        
        elif command == "solve_problems":
            session.current_state = "solve_problems"
            session.data["problems_solved"] += 1
            return "‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞! –ü–æ–µ–∑–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–Ω–æ üîß"
        
        elif command == "next_train":
            session.current_state = "next_train"
            session.data["current_train"] += 1
            if session.data["current_train"] > session.data["total_trains"]:
                session.current_state = "end_shift"
                return "üèÅ –í—Å–µ –ø–æ–µ–∑–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã! –°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
            return f"‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–µ–∑–¥—É {session.data['current_train']} –∏–∑ {session.data['total_trains']}"
        
        elif command == "end_shift":
            session.current_state = "end_shift"
            return "üèÅ –°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏..."
        
        elif command == "continue":
            session.current_state = "on_duty"
            return "‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É!"
        
        elif command == "new_shift":
            session.current_state = "welcome"
            session.data.clear()
            return "üîÑ –ù–æ–≤–∞—è —Å–º–µ–Ω–∞ –≥–æ—Ç–æ–≤–∞ –∫ –Ω–∞—á–∞–ª—É!"
        
        elif command == "back":
            session.current_state = "welcome"
            return "‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        
        return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
    
    def _process_hangman_command(self, session: GameSession, command: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ –∏–≥—Ä–µ '–í–∏—Å–µ–ª–∏—Ü–∞'"""
        if command == "start_game":
            session.current_state = "playing"
            words = ["–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–∫–æ–º–ø—å—é—Ç–µ—Ä", "–∞–ª–≥–æ—Ä–∏—Ç–º", "–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç"]
            session.data["word"] = random.choice(words)
            session.data["guessed_letters"] = set()
            session.data["wrong_guesses"] = 0
            session.data["word_display"] = "_" * len(session.data["word"])
            return "üéØ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –£–≥–∞–¥—ã–≤–∞–π –±—É–∫–≤—ã!"
        
        elif command == "guess_letter":
            session.current_state = "guess_letter"
            return "üî§ –í–≤–µ–¥–∏ –±—É–∫–≤—É –¥–ª—è —É–≥–∞–¥—ã–≤–∞–Ω–∏—è..."
        
        elif command == "continue":
            session.current_state = "playing"
            return "‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É!"
        
        elif command == "give_up":
            session.current_state = "game_over"
            session.is_active = False
            return f"üèÅ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –°–ª–æ–≤–æ –±—ã–ª–æ: {session.data.get('word', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
        
        elif command == "new_game":
            session.current_state = "welcome"
            session.data.clear()
            session.is_active = True
            return "üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞ –≥–æ—Ç–æ–≤–∞!"
        
        elif command == "back":
            session.current_state = "welcome"
            return "‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        
        return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
    
    def _process_poker_command(self, session: GameSession, command: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ –∏–≥—Ä–µ '–ü–æ–∫–µ—Ä'"""
        if command == "create_table":
            session.current_state = "create_table"
            session.data["table_id"] = f"table_{int(time.time())}"
            session.data["players"] = [session.user_id]
            session.data["pot"] = 0
            session.data["chips"] = 1000
            return "üÉè –°—Ç–æ–ª —Å–æ–∑–¥–∞–Ω! –û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤..."
        
        elif command == "start_game":
            session.current_state = "playing"
            return "üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –¢–≤–æ–π —Ö–æ–¥!"
        
        elif command == "bet":
            session.current_state = "bet"
            return "üí∞ –í–≤–µ–¥–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏..."
        
        elif command == "call":
            session.current_state = "playing"
            session.data["chips"] -= 50
            session.data["pot"] += 50
            return "‚úÖ –°—Ç–∞–≤–∫–∞ —É—Ä–∞–≤–Ω–µ–Ω–∞!"
        
        elif command == "fold":
            session.current_state = "game_over"
            session.is_active = False
            return "‚ùå –ö–∞—Ä—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã. –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞."
        
        elif command == "check":
            session.current_state = "playing"
            return "ü§ù –ü–∞—Å. –•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É."
        
        elif command == "continue":
            session.current_state = "playing"
            return "‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É!"
        
        elif command == "cancel":
            session.current_state = "playing"
            return "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
        
        elif command == "new_game":
            session.current_state = "welcome"
            session.data.clear()
            session.is_active = True
            return "üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞ –≥–æ—Ç–æ–≤–∞!"
        
        elif command == "back":
            session.current_state = "welcome"
            return "‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        
        return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
    
    def _get_state_message(self, session_id: str) -> Tuple[str, List[Dict[str, str]]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        session = self.sessions[session_id]
        game_type = session.game_type
        current_state = session.current_state
        
        if game_type not in self.games or current_state not in self.games[game_type]:
            return "‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", []
        
        state = self.games[game_type][current_state]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π –¥–∞–Ω–Ω—ã—Ö
        description = state.description
        if game_type == "conductor" and current_state == "on_duty":
            description = description.format(
                current_train=session.data.get("current_train", 1),
                total_trains=session.data.get("total_trains", 5)
            )
        elif game_type == "hangman" and current_state == "playing":
            description = description.format(
                word_display=session.data.get("word_display", "_____")
            )
        elif game_type == "poker" and current_state == "playing":
            description = description.format(
                pot=session.data.get("pot", 0),
                chips=session.data.get("chips", 1000)
            )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress_text = ""
        if state.show_progress_bar:
            if game_type == "conductor":
                current = session.data.get("current_train", 1)
                total = session.data.get("total_trains", 5)
                progress = int((current / total) * 100)
                progress_text = f"\n\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: [{('‚ñà' * (progress // 20)).ljust(5, '‚ñë')}] {progress}%"
            elif game_type == "hangman":
                wrong = session.data.get("wrong_guesses", 0)
                progress = int((wrong / 6) * 100)
                progress_text = f"\n\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: [{('‚ñà' * (progress // 20)).ljust(5, '‚ñë')}] {progress}%"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        buttons = []
        for action in state.actions:
            buttons.append({
                "label": f"{action.emoji} {action.label}",
                "command": f"/game {game_type} {action.command}"
            })
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"{state.title}\n\n{description}{progress_text}"
        
        if state.progress_text:
            progress_text = state.progress_text
            if game_type == "conductor":
                progress_text = progress_text.format(
                    current_train=session.data.get("current_train", 1),
                    total_trains=session.data.get("total_trains", 5)
                )
            elif game_type == "hangman":
                progress_text = progress_text.format(
                    wrong_guesses=session.data.get("wrong_guesses", 0)
                )
            elif game_type == "poker":
                progress_text = progress_text.format(
                    pot=session.data.get("pot", 0),
                    chips=session.data.get("chips", 1000)
                )
            message += f"\n\n{progress_text}"
        
        return message, buttons


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–≤–∏–∂–∫–∞ –∏–≥—Ä
game_engine = GameEngine()