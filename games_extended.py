"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã –¥–ª—è CryBot
"""
import random
import time
from dataclasses import dataclass, field
from typing import Dict, List, Optional, Set, Tuple
from enum import Enum


# -------- –ü—Ä–æ–≤–æ–¥–Ω–∏—Ü–∞ –†–ñ–î --------
class TrainStatus(Enum):
    ON_TIME = "–≤—Ä–µ–º—è"
    DELAYED = "–∑–∞–¥–µ—Ä–∂–∫–∞"
    CANCELLED = "–æ—Ç–º–µ–Ω—ë–Ω"
    DIVERTED = "–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω"


@dataclass
class Train:
    number: str
    route: str
    departure: str
    arrival: str
    status: TrainStatus
    delay_minutes: int = 0
    platform: str = "?"
    passengers: int = 0
    problems: List[str] = field(default_factory=list)


@dataclass
class ConductorSession:
    peer_id: int
    user_id: int
    score: int = 0
    trains_handled: int = 0
    passengers_helped: int = 0
    problems_solved: int = 0
    start_time: float = field(default_factory=time.time)
    current_train: Optional[Train] = None
    is_active: bool = False


class ConductorGame:
    def __init__(self):
        self.sessions: Dict[int, ConductorSession] = {}
        self.routes = [
            "–ú–æ—Å–∫–≤–∞ - –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
            "–ú–æ—Å–∫–≤–∞ - –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", 
            "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ - –°–æ—á–∏",
            "–ö–∞–∑–∞–Ω—å - –ú–æ—Å–∫–≤–∞",
            "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫ - –ú–æ—Å–∫–≤–∞",
            "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫ - –ú–æ—Å–∫–≤–∞",
            "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥ - –ú–æ—Å–∫–≤–∞"
        ]
        self.stations = [
            "–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–°–æ—á–∏", "–ö–∞–∑–∞–Ω—å",
            "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫", "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥", "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥",
            "–°–∞–º–∞—Ä–∞", "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É", "–£—Ñ–∞", "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", "–ü–µ—Ä–º—å"
        ]
        self.problems = [
            "–æ–ø–æ–∑–¥–∞–Ω–∏–µ", "–ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ", "–ø–æ–ª–æ–º–∫–∞", "–ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è",
            "—Ä–µ–º–æ–Ω—Ç –ø—É—Ç–∏", "–∫–∞—Ä–∞–Ω—Ç–∏–Ω", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã"
        ]
    
    def start_session(self, peer_id: int, user_id: int) -> str:
        if peer_id in self.sessions:
            return "‚ùå –ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ"
        
        session = ConductorSession(peer_id=peer_id, user_id=user_id, is_active=True)
        self.sessions[peer_id] = session
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–µ–∑–¥
        train = self._generate_train()
        session.current_train = train
        
        return (
            f"üöÇ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≤–æ–¥–Ω–∏—Ü—ã –†–ñ–î!\n\n"
            f"–ü–æ–µ–∑–¥ ‚Ññ{train.number}\n"
            f"–ú–∞—Ä—à—Ä—É—Ç: {train.route}\n"
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {train.departure}\n"
            f"–ü—Ä–∏–±—ã—Ç–∏–µ: {train.arrival}\n"
            f"–°—Ç–∞—Ç—É—Å: {train.status.value}\n"
            f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {train.platform}\n"
            f"–ü–∞—Å—Å–∞–∂–∏—Ä—ã: {train.passengers}\n\n"
            f"–ß—Ç–æ –¥–µ–ª–∞–µ–º? (–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∏–ª–µ—Ç—ã, –ø–æ–º–æ—á—å –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º, —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã)"
        )
    
    def _generate_train(self) -> Train:
        route = random.choice(self.routes)
        dep, arr = route.split(" - ")
        
        status = random.choice(list(TrainStatus))
        delay = random.randint(0, 120) if status == TrainStatus.DELAYED else 0
        
        problems = []
        if random.random() < 0.3:  # 30% —à–∞–Ω—Å –ø—Ä–æ–±–ª–µ–º
            problems = random.sample(self.problems, random.randint(1, 2))
        
        return Train(
            number=f"{random.randint(1, 999):03d}",
            route=route,
            departure=dep,
            arrival=arr,
            status=status,
            delay_minutes=delay,
            platform=str(random.randint(1, 20)),
            passengers=random.randint(50, 500),
            problems=problems
        )
    
    def handle_action(self, peer_id: int, action: str) -> str:
        if peer_id not in self.sessions:
            return "‚ùå –ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞. –ù–∞–ø–∏—à–∏ /conductor"
        
        session = self.sessions[peer_id]
        if not session.is_active:
            return "‚ùå –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
        
        train = session.current_train
        if not train:
            return "‚ùå –û—à–∏–±–∫–∞: –ø–æ–µ–∑–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        if action == "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∏–ª–µ—Ç—ã":
            return self._check_tickets(session, train)
        elif action == "–ø–æ–º–æ—á—å –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º":
            return self._help_passengers(session, train)
        elif action == "—Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã":
            return self._solve_problems(session, train)
        elif action == "—Å–ª–µ–¥—É—é—â–∏–π –ø–æ–µ–∑–¥":
            return self._next_train(session)
        elif action == "–∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É":
            return self._end_shift(session)
        else:
            return (
                f"‚ùì –ù–µ–ø–æ–Ω—è—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
                f"‚Ä¢ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∏–ª–µ—Ç—ã\n"
                f"‚Ä¢ –ø–æ–º–æ—á—å –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º\n"
                f"‚Ä¢ —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã\n"
                f"‚Ä¢ —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–µ–∑–¥\n"
                f"‚Ä¢ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É"
            )
    
    def _check_tickets(self, session: ConductorSession, train: Train) -> str:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–ª–µ—Ç–æ–≤
        score_gain = random.randint(5, 15)
        session.score += score_gain
        session.trains_handled += 1
        
        return (
            f"üé´ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–ª–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"‚úÖ –í—Å–µ –ø–∞—Å—Å–∞–∂–∏—Ä—ã –∏–º–µ—é—Ç –±–∏–ª–µ—Ç—ã\n"
            f"üí∞ +{score_gain} –æ—á–∫–æ–≤\n"
            f"üìä –û–±—â–∏–π —Å—á—ë—Ç: {session.score}"
        )
    
    def _help_passengers(self, session: ConductorSession, train: Train) -> str:
        # –ü–æ–º–æ—â—å –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º
        help_count = random.randint(3, 8)
        score_gain = help_count * 2
        session.score += score_gain
        session.passengers_helped += help_count
        
        return (
            f"üë• –ü–æ–º–æ—â—å –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º –æ–∫–∞–∑–∞–Ω–∞!\n"
            f"‚úÖ –ü–æ–º–æ–≥–ª–∏ {help_count} –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º\n"
            f"üí∞ +{score_gain} –æ—á–∫–æ–≤\n"
            f"üìä –û–±—â–∏–π —Å—á—ë—Ç: {session.score}"
        )
    
    def _solve_problems(self, session: ConductorSession, train: Train) -> str:
        if not train.problems:
            return "‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ—Ç, –ø–æ–µ–∑–¥ –∏–¥—ë—Ç –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é!"
        
        # –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
        solved = random.randint(1, len(train.problems))
        score_gain = solved * 10
        session.score += score_gain
        session.problems_solved += solved
        
        return (
            f"üîß –ü—Ä–æ–±–ª–µ–º—ã —Ä–µ—à–µ–Ω—ã!\n"
            f"‚úÖ –†–µ—à–∏–ª–∏ {solved} –∏–∑ {len(train.problems)} –ø—Ä–æ–±–ª–µ–º\n"
            f"üí∞ +{score_gain} –æ—á–∫–æ–≤\n"
            f"üìä –û–±—â–∏–π —Å—á—ë—Ç: {session.score}"
        )
    
    def _next_train(self, session: ConductorSession) -> str:
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–µ–∑–¥—É
        train = self._generate_train()
        session.current_train = train
        
        return (
            f"üöÇ –°–ª–µ–¥—É—é—â–∏–π –ø–æ–µ–∑–¥!\n\n"
            f"–ü–æ–µ–∑–¥ ‚Ññ{train.number}\n"
            f"–ú–∞—Ä—à—Ä—É—Ç: {train.route}\n"
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {train.departure}\n"
            f"–ü—Ä–∏–±—ã—Ç–∏–µ: {train.arrival}\n"
            f"–°—Ç–∞—Ç—É—Å: {train.status.value}\n"
            f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {train.platform}\n"
            f"–ü–∞—Å—Å–∞–∂–∏—Ä—ã: {train.passengers}\n"
            f"–ü—Ä–æ–±–ª–µ–º—ã: {', '.join(train.problems) if train.problems else '–Ω–µ—Ç'}"
        )
    
    def _end_shift(self, session: ConductorSession) -> str:
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ–Ω—ã
        duration = int(time.time() - session.start_time) // 60
        session.is_active = False
        
        total_score = session.score
        bonus = session.trains_handled * 5 + session.passengers_helped * 2 + session.problems_solved * 10
        
        final_score = total_score + bonus
        
        result = (
            f"üèÅ –°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–µ–∑–¥–æ–≤: {session.trains_handled}\n"
            f"‚Ä¢ –ü–æ–º–æ–≥–ª–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º: {session.passengers_helped}\n"
            f"‚Ä¢ –†–µ—à–∏–ª–∏ –ø—Ä–æ–±–ª–µ–º: {session.problems_solved}\n"
            f"‚Ä¢ –í—Ä–µ–º—è —Å–º–µ–Ω—ã: {duration} –º–∏–Ω\n\n"
            f"üí∞ –ò—Ç–æ–≥–æ–≤—ã–π —Å—á—ë—Ç: {final_score}\n"
            f"üéØ –ë–æ–Ω—É—Å –∑–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: +{bonus}"
        )
        
        # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        del self.sessions[session.peer_id]
        
        return result


# -------- –ü–æ–∫–µ—Ä --------
class PokerHand(Enum):
    HIGH_CARD = "—Å—Ç–∞—Ä—à–∞—è –∫–∞—Ä—Ç–∞"
    PAIR = "–ø–∞—Ä–∞"
    TWO_PAIR = "–¥–≤–µ –ø–∞—Ä—ã"
    THREE_OF_KIND = "—Ç—Ä–æ–π–∫–∞"
    STRAIGHT = "—Å—Ç—Ä–∏—Ç"
    FLUSH = "—Ñ–ª–µ—à"
    FULL_HOUSE = "—Ñ—É–ª–ª-—Ö–∞—É—Å"
    FOUR_OF_KIND = "–∫–∞—Ä–µ"
    STRAIGHT_FLUSH = "—Å—Ç—Ä–∏—Ç-—Ñ–ª–µ—à"
    ROYAL_FLUSH = "—Ä–æ—è–ª-—Ñ–ª–µ—à"


@dataclass
class Card:
    suit: str
    rank: str
    value: int


@dataclass
class PokerPlayer:
    user_id: int
    name: str
    chips: int = 1000
    hand: List[Card] = field(default_factory=list)
    bet: int = 0
    folded: bool = False
    is_all_in: bool = False


@dataclass
class PokerGame:
    peer_id: int
    players: Dict[int, PokerPlayer] = field(default_factory=dict)
    deck: List[Card] = field(default_factory=list)
    pot: int = 0
    current_bet: int = 0
    dealer: int = 0
    is_active: bool = False
    round: str = "preflop"  # preflop, flop, turn, river
    community_cards: List[Card] = field(default_factory=list)


class PokerGameManager:
    def __init__(self):
        self.games: Dict[int, PokerGame] = {}
        self.suits = ["‚ô†", "‚ô•", "‚ô¶", "‚ô£"]
        self.ranks = ["2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K", "A"]
    
    def create_game(self, peer_id: int, creator_id: int, creator_name: str) -> str:
        if peer_id in self.games:
            return "‚ùå –ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ"
        
        game = PokerGame(peer_id=peer_id)
        game.players[creator_id] = PokerPlayer(user_id=creator_id, name=creator_name)
        game.is_active = True
        self.games[peer_id] = game
        
        return (
            f"üÉè –ü–æ–∫–µ—Ä-—Å—Ç–æ–ª —Å–æ–∑–¥–∞–Ω!\n"
            f"üë§ –ò–≥—Ä–æ–∫: {creator_name}\n"
            f"üí∞ –§–∏—à–∫–∏: 1000\n\n"
            f"–î—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /poker join"
        )
    
    def join_game(self, peer_id: int, user_id: int, name: str) -> str:
        if peer_id not in self.games:
            return "‚ùå –ò–≥—Ä–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞. –°–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /poker create"
        
        game = self.games[peer_id]
        if user_id in game.players:
            return "‚ùå –í—ã —É–∂–µ –≤ –∏–≥—Ä–µ"
        
        if len(game.players) >= 8:
            return "‚ùå –ú–∞–∫—Å–∏–º—É–º 8 –∏–≥—Ä–æ–∫–æ–≤"
        
        game.players[user_id] = PokerPlayer(user_id=user_id, name=name)
        
        return (
            f"‚úÖ {name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!\n"
            f"üë• –ò–≥—Ä–æ–∫–æ–≤: {len(game.players)}\n"
            f"üí∞ –§–∏—à–∫–∏: 1000"
        )


# -------- –®–∞—Ö–º–∞—Ç—ã --------
class ChessPiece(Enum):
    PAWN = "‚ôü"
    ROOK = "‚ôú"
    KNIGHT = "‚ôû"
    BISHOP = "‚ôù"
    QUEEN = "‚ôõ"
    KING = "‚ôö"


@dataclass
class ChessMove:
    from_pos: str
    to_pos: str
    piece: ChessPiece
    is_capture: bool = False
    is_check: bool = False
    is_checkmate: bool = False


@dataclass
class ChessGame:
    peer_id: int
    white_player: int
    black_player: int
    current_turn: int
    board: List[List[Optional[Tuple[ChessPiece, bool]]]] = field(default_factory=list)  # (piece, is_white)
    move_history: List[ChessMove] = field(default_factory=list)
    is_active: bool = False
    winner: Optional[int] = None


# -------- –í–∏—Å–µ–ª–∏—Ü–∞ --------
@dataclass
class HangmanGame:
    peer_id: int
    word: str
    guessed_letters: Set[str] = field(default_factory=set)
    wrong_guesses: int = 0
    max_wrong: int = 6
    is_active: bool = False
    start_time: float = field(default_factory=time.time)


class HangmanManager:
    def __init__(self):
        self.games: Dict[int, HangmanGame] = {}
        self.words = [
            "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–∫–æ–º–ø—å—é—Ç–µ—Ä", "–∞–ª–≥–æ—Ä–∏—Ç–º", "–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö",
            "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "—Å–µ—Ä–≤–µ—Ä", "–∫–ª–∏–µ–Ω—Ç", "—Ñ—É–Ω–∫—Ü–∏—è", "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è",
            "–º–∞—Å—Å–∏–≤", "–æ–±—ä–µ–∫—Ç", "–∫–ª–∞—Å—Å", "–º–µ—Ç–æ–¥", "–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"
        ]
    
    def start_game(self, peer_id: int) -> str:
        if peer_id in self.games:
            return "‚ùå –ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ"
        
        word = random.choice(self.words)
        game = HangmanGame(peer_id=peer_id, word=word, is_active=True)
        self.games[peer_id] = game
        
        return (
            f"üéØ –í–∏—Å–µ–ª–∏—Ü–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n\n"
            f"–°–ª–æ–≤–æ: {'_' * len(word)}\n"
            f"–ë—É–∫–≤: {len(word)}\n"
            f"–û—à–∏–±–æ–∫: 0/{game.max_wrong}\n\n"
            f"–£–≥–∞–¥—ã–≤–∞–π—Ç–µ –±—É–∫–≤—ã –ø–æ –æ–¥–Ω–æ–π!"
        )
    
    def guess_letter(self, peer_id: int, letter: str) -> str:
        if peer_id not in self.games:
            return "‚ùå –ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞"
        
        game = self.games[peer_id]
        if not game.is_active:
            return "‚ùå –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
        
        letter = letter.lower()
        if len(letter) != 1:
            return "‚ùå –£–≥–∞–¥—ã–≤–∞–π—Ç–µ –ø–æ –æ–¥–Ω–æ–π –±—É–∫–≤–µ"
        
        if letter in game.guessed_letters:
            return "‚ùå –≠—Ç–∞ –±—É–∫–≤–∞ —É–∂–µ –±—ã–ª–∞"
        
        game.guessed_letters.add(letter)
        
        if letter in game.word:
            # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –±—É–∫–≤–∞
            if self._is_word_guessed(game):
                return self._end_game(game, True)
            else:
                return self._get_game_status(game)
        else:
            # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –±—É–∫–≤–∞
            game.wrong_guesses += 1
            if game.wrong_guesses >= game.max_wrong:
                return self._end_game(game, False)
            else:
                return self._get_game_status(game)
    
    def _is_word_guessed(self, game: HangmanGame) -> bool:
        return all(letter in game.guessed_letters for letter in game.word)
    
    def _get_game_status(self, game: HangmanGame) -> str:
        display_word = ""
        for letter in game.word:
            if letter in game.guessed_letters:
                display_word += letter
            else:
                display_word += "_"
        
        return (
            f"üéØ –°–ª–æ–≤–æ: {display_word}\n"
            f"–£–≥–∞–¥–∞–Ω–Ω—ã–µ –±—É–∫–≤—ã: {', '.join(sorted(game.guessed_letters))}\n"
            f"–û—à–∏–±–æ–∫: {game.wrong_guesses}/{game.max_wrong}\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {game.max_wrong - game.wrong_guesses}"
        )
    
    def _end_game(self, game: HangmanGame, won: bool) -> str:
        game.is_active = False
        
        if won:
            result = f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –°–ª–æ–≤–æ —É–≥–∞–¥–∞–Ω–æ: {game.word}"
        else:
            result = f"üíÄ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –°–ª–æ–≤–æ –±—ã–ª–æ: {game.word}"
        
        # –û—á–∏—â–∞–µ–º –∏–≥—Ä—É
        del self.games[game.peer_id]
        
        return result


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∏–≥—Ä
conductor_game = ConductorGame()
poker_manager = PokerGameManager()
hangman_manager = HangmanManager()