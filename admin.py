"""
–ê–¥–º–∏–Ω –º–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
"""
import json
import logging
import time
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from enum import Enum

import vk_api
from vk_api.keyboard import VkKeyboard, VkKeyboardColor

from ai import runtime_settings, export_ai_settings, import_ai_settings, reset_ai_settings
from config import (
    export_config,
    import_config,
    backup_config_file,
    list_config_backups,
    restore_config_from_backup,
)

# ---------- –°–∏—Å—Ç–µ–º–∞ —Ä–æ–ª–µ–π ----------
class UserRole(Enum):
    USER = "user"
    EDITOR = "editor"
    MODERATOR = "moderator"
    ADMIN = "admin"
    SUPER_ADMIN = "super_admin"

@dataclass
class UserProfile:
    user_id: int
    role: UserRole
    ai_provider: str = "AUTO"
    ai_model: str = ""
    temperature: float = 0.6
    top_p: float = 1.0
    max_tokens: int = 80
    max_chars: int = 380
    max_history: int = 8
    created_at: float = 0.0
    last_activity: float = 0.0

# ---------- Per-chat –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ----------
@dataclass
class ChatSettings:
    chat_id: int
    ai_provider: str = "AUTO"
    ai_model: str = ""
    temperature: float = 0.6
    top_p: float = 1.0
    max_tokens: int = 80
    max_chars: int = 380
    max_history: int = 8
    rate_limit: int = 10
    rate_window: int = 60
    created_at: float = 0.0
    updated_at: float = 0.0

# ---------- –ü—Ä–µ—Å–µ—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ ----------
class AIPresets:
    PRESETS = {
        "–ö–æ—Ä–æ—Ç–∫–æ": {
            "temperature": 0.3,
            "top_p": 0.9,
            "max_tokens": 50,
            "max_chars": 200,
            "max_history": 4
        },
        "–î–µ—Ç–∞–ª—å–Ω–æ": {
            "temperature": 0.8,
            "top_p": 1.0,
            "max_tokens": 200,
            "max_chars": 600,
            "max_history": 12
        },
        "–î–µ—à–µ–≤–æ": {
            "temperature": 0.5,
            "top_p": 0.8,
            "max_tokens": 30,
            "max_chars": 150,
            "max_history": 3
        },
        "–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ": {
            "temperature": 1.2,
            "top_p": 1.0,
            "max_tokens": 150,
            "max_chars": 500,
            "max_history": 8
        }
    }
    
    @classmethod
    def get_preset(cls, name: str) -> Optional[Dict]:
        return cls.PRESETS.get(name)
    
    @classmethod
    def list_presets(cls) -> List[str]:
        return list(cls.PRESETS.keys())
    
    @classmethod
    def apply_preset(cls, name: str) -> bool:
        preset = cls.get_preset(name)
        if not preset:
            return False
            
        for key, value in preset.items():
            if hasattr(runtime_settings, key):
                setattr(runtime_settings, key, value)
        return True

# ---------- –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∏ –ø–æ–∏—Å–∫ ----------
class Paginator:
    def __init__(self, items: List, page_size: int = 10):
        self.items = items
        self.page_size = page_size
        self.current_page = 0
        
    def get_page(self, page: int) -> Tuple[List, int, int, int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É, —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü"""
        if page < 0:
            page = 0
        if page >= self.total_pages:
            page = self.total_pages - 1
            
        start = page * self.page_size
        end = start + self.page_size
        page_items = self.items[start:end]
        
        return page_items, page, self.total_pages, len(self.items)
    
    @property
    def total_pages(self) -> int:
        return (len(self.items) + self.page_size - 1) // self.page_size
    
    def next_page(self) -> int:
        if self.current_page < self.total_pages - 1:
            self.current_page += 1
        return self.current_page
    
    def prev_page(self) -> int:
        if self.current_page > 0:
            self.current_page -= 1
        return self.current_page

class ModelSearch:
    def __init__(self):
        self.models = [
            "deepseek/deepseek-chat-v3-0324:free",
            "deepseek/deepseek-r1-distill-llama-70b:free",
            "deepseek/deepseek-r1-0528:free",
            "qwen/qwen3-coder:free",
            "deepseek/deepseek-r1:free",
            "gpt-5-nano",
            "gpt-3.5-turbo",
            "deepseek-chat",
            "gemini-flash-1.5-8b"
        ]
    
    def search(self, query: str) -> List[str]:
        """–ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
        query = query.lower()
        results = []
        
        for model in self.models:
            if query in model.lower():
                results.append(model)
        
        return results
    
    def get_all(self) -> List[str]:
        return self.models.copy()

# ---------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–¥–º–∏–Ω–∫–∏ ----------
def build_admin_keyboard() -> Dict:
    """–û—Å–Ω–æ–≤–Ω–∞—è –∞–¥–º–∏–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    keyboard = VkKeyboard(one_time=False, inline=False)
    
    # AI –º–æ–¥–µ–ª–∏
    keyboard.add_button("ü§ñ AI –º–æ–¥–µ–ª–∏", color=VkKeyboardColor.PRIMARY, payload={"action": "admin_ai_models"})
    keyboard.add_button("‚öôÔ∏è AI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", color=VkKeyboardColor.SECONDARY, payload={"action": "admin_ai_settings"})
    keyboard.add_line()
    
    # –ò–≥—Ä—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    keyboard.add_button("üéÆ –ò–≥—Ä—ã", color=VkKeyboardColor.PRIMARY, payload={"action": "admin_games"})
    keyboard.add_button("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", color=VkKeyboardColor.SECONDARY, payload={"action": "admin_stats"})
    keyboard.add_line()
    
    # –°–∏—Å—Ç–µ–º–∞
    keyboard.add_button("üîß –°–∏—Å—Ç–µ–º–∞", color=VkKeyboardColor.PRIMARY, payload={"action": "admin_system"})
    keyboard.add_button("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", color=VkKeyboardColor.SECONDARY, payload={"action": "admin_users"})
    keyboard.add_line()
    
    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    keyboard.add_button("üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", color=VkKeyboardColor.PRIMARY, payload={"action": "admin_monitoring"})
    keyboard.add_button("üö® –õ–æ–≥–∏", color=VkKeyboardColor.NEGATIVE, payload={"action": "admin_logs"})
    
    return keyboard.get_keyboard()

def build_ai_settings_keyboard() -> Dict:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ AI –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    keyboard = VkKeyboard(one_time=False, inline=False)
    
    # –†—è–¥ 1: —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
    keyboard.add_button("üå°Ô∏è -", color=VkKeyboardColor.SECONDARY, payload={"action": "ai_temp_down"})
    keyboard.add_button("üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", color=VkKeyboardColor.PRIMARY, payload={"action": "ai_temp_info"})
    keyboard.add_button("üå°Ô∏è +", color=VkKeyboardColor.SECONDARY, payload={"action": "ai_temp_up"})
    keyboard.add_line()
    
    # –†—è–¥ 2: top-p
    keyboard.add_button("üìä -", color=VkKeyboardColor.SECONDARY, payload={"action": "ai_top_p_down"})
    keyboard.add_button("üìä Top-P", color=VkKeyboardColor.PRIMARY, payload={"action": "ai_top_p_info"})
    keyboard.add_button("üìä +", color=VkKeyboardColor.SECONDARY, payload={"action": "ai_top_p_up"})
    keyboard.add_line()
    
    # –†—è–¥ 3: max tokens OpenRouter
    keyboard.add_button("üî¢ -", color=VkKeyboardColor.SECONDARY, payload={"action": "ai_max_or_down"})
    keyboard.add_button("üî¢ Max OR", color=VkKeyboardColor.PRIMARY, payload={"action": "ai_max_or_info"})
    keyboard.add_button("üî¢ +", color=VkKeyboardColor.SECONDARY, payload={"action": "ai_max_or_up"})
    keyboard.add_line()
    
    # –†—è–¥ 4: max tokens AITunnel
    keyboard.add_button("üî¢ -", color=VkKeyboardColor.SECONDARY, payload={"action": "ai_max_at_down"})
    keyboard.add_button("üî¢ Max AT", color=VkKeyboardColor.PRIMARY, payload={"action": "ai_max_at_info"})
    keyboard.add_button("üî¢ +", color=VkKeyboardColor.SECONDARY, payload={"action": "ai_max_at_up"})
    keyboard.add_line()
    
    # –†—è–¥ 5: reasoning
    keyboard.add_button("üß† –í–∫–ª/–í—ã–∫–ª", color=VkKeyboardColor.PRIMARY, payload={"action": "ai_reason_toggle"})
    keyboard.add_button("üß† –¢–æ–∫–µ–Ω—ã -", color=VkKeyboardColor.SECONDARY, payload={"action": "ai_reason_tokens_down"})
    keyboard.add_button("üß† –¢–æ–∫–µ–Ω—ã +", color=VkKeyboardColor.SECONDARY, payload={"action": "ai_reason_tokens_up"})
    keyboard.add_line()
    
    # –†—è–¥ 6: reasoning depth
    keyboard.add_button("üß† –ì–ª—É–±–∏–Ω–∞", color=VkKeyboardColor.PRIMARY, payload={"action": "ai_reason_depth_cycle"})
    keyboard.add_button("üìö –ò—Å—Ç–æ—Ä–∏—è -", color=VkKeyboardColor.SECONDARY, payload={"action": "ai_hist_down"})
    keyboard.add_button("üìö –ò—Å—Ç–æ—Ä–∏—è +", color=VkKeyboardColor.SECONDARY, payload={"action": "ai_hist_up"})
    keyboard.add_line()
    
    # –†—è–¥ 7: —Å–∏–º–≤–æ–ª—ã –∏ fallback
    keyboard.add_button("üî§ –°–∏–º–≤–æ–ª—ã -", color=VkKeyboardColor.SECONDARY, payload={"action": "ai_chars_down"})
    keyboard.add_button("üî§ –°–∏–º–≤–æ–ª—ã +", color=VkKeyboardColor.SECONDARY, payload={"action": "ai_chars_up"})
    keyboard.add_button("Fallback on/off", color=VkKeyboardColor.SECONDARY, payload={"action": "ai_fallback_toggle"})
    keyboard.add_line()
    
    # –†—è–¥ 8: –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏ –ø–æ–∫–∞–∑–∞—Ç—å
    keyboard.add_button("–ü—Ä–æ–≤–∞–π–¥–µ—Ä", color=VkKeyboardColor.PRIMARY, payload={"action": "admin_ai_provider"})
    keyboard.add_button("–ü–æ–∫–∞–∑–∞—Ç—å", color=VkKeyboardColor.SECONDARY, payload={"action": "admin_current"})
    keyboard.add_line()
    
    # –†—è–¥ 9: —ç–∫—Å–ø–æ—Ä—Ç/–∏–º–ø–æ—Ä—Ç
    keyboard.add_button("üì§ –≠–∫—Å–ø–æ—Ä—Ç", color=VkKeyboardColor.POSITIVE, payload={"action": "ai_export_settings"})
    keyboard.add_button("üì• –ò–º–ø–æ—Ä—Ç", color=VkKeyboardColor.POSITIVE, payload={"action": "ai_import_settings"})
    keyboard.add_line()
    
    # –†—è–¥ 10: —Å–±—Ä–æ—Å –∏ –Ω–∞–∑–∞–¥
    keyboard.add_button("üîÑ –°–±—Ä–æ—Å", color=VkKeyboardColor.NEGATIVE, payload={"action": "ai_reset_settings"})
    keyboard.add_button("‚Üê –ù–∞–∑–∞–¥", color=VkKeyboardColor.SECONDARY, payload={"action": "admin_back"})
    
    return keyboard.get_keyboard()

def build_ai_models_keyboard(page: int = 0, search_query: str = "") -> Dict:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ AI –º–æ–¥–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    keyboard = VkKeyboard(one_time=False, inline=False)
    
    model_search = ModelSearch()
    if search_query:
        models = model_search.search(search_query)
    else:
        models = model_search.get_all()
    
    paginator = Paginator(models, page_size=5)
    page_items, current_page, total_pages, total_items = paginator.get_page(page)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–µ–ª–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    for model in page_items:
        keyboard.add_button(f"ü§ñ {model[:30]}...", color=VkKeyboardColor.PRIMARY, 
                           payload={"action": "ai_model_select", "model": model})
        keyboard.add_line()
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    if total_pages > 1:
        if current_page > 0:
            keyboard.add_button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", color=VkKeyboardColor.SECONDARY, 
                               payload={"action": "ai_models_page", "page": current_page - 1})
        
        keyboard.add_button(f"üìÑ {current_page + 1}/{total_pages}", color=VkKeyboardColor.PRIMARY, 
                           payload={"action": "ai_models_info"})
        
        if current_page < total_pages - 1:
            keyboard.add_button("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", color=VkKeyboardColor.SECONDARY, 
                               payload={"action": "ai_models_page", "page": current_page + 1})
        keyboard.add_line()
    
    # –ü–æ–∏—Å–∫
    keyboard.add_button("üîç –ü–æ–∏—Å–∫", color=VkKeyboardColor.PRIMARY, payload={"action": "ai_models_search"})
    keyboard.add_button("üìã –í—Å–µ –º–æ–¥–µ–ª–∏", color=VkKeyboardColor.SECONDARY, payload={"action": "ai_models_all"})
    keyboard.add_line()
    
    # –ù–∞–∑–∞–¥
    keyboard.add_button("‚Üê –ù–∞–∑–∞–¥", color=VkKeyboardColor.SECONDARY, payload={"action": "admin_back"})
    
    return keyboard.get_keyboard()

def build_presets_keyboard() -> Dict:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–µ—Å–µ—Ç–æ–≤"""
    keyboard = VkKeyboard(one_time=False, inline=False)
    
    presets = AIPresets.list_presets()
    for i, preset in enumerate(presets):
        color = VkKeyboardColor.PRIMARY if i % 2 == 0 else VkKeyboardColor.SECONDARY
        keyboard.add_button(f"‚öôÔ∏è {preset}", color=color, payload={"action": "ai_preset_apply", "preset": preset})
        if i % 2 == 1:
            keyboard.add_line()
    
    if len(presets) % 2 == 1:
        keyboard.add_line()
    
    keyboard.add_button("‚Üê –ù–∞–∑–∞–¥", color=VkKeyboardColor.SECONDARY, payload={"action": "admin_back"})
    
    return keyboard.get_keyboard()

# ---------- –ê–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏ ----------
def handle_admin_ai_settings(vk, peer_id: int, user_id: int) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç AI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    text = (
        f"‚öôÔ∏è AI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
        f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {runtime_settings.or_to_at_fallback}\n"
        f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {runtime_settings.temperature}\n"
        f"Top-P: {runtime_settings.top_p}\n"
        f"–ú–∞–∫—Å. —Ç–æ–∫–µ–Ω—ã OR: {runtime_settings.max_tokens_or}\n"
        f"–ú–∞–∫—Å. —Ç–æ–∫–µ–Ω—ã AT: {runtime_settings.max_tokens_at}\n"
        f"–ú–∞–∫—Å. —Å–∏–º–≤–æ–ª—ã: {runtime_settings.max_ai_chars}\n"
        f"–ò—Å—Ç–æ—Ä–∏—è: {runtime_settings.max_history}\n"
        f"–†–µ—Ç—Ä–∞–∏ OR: {runtime_settings.or_retries}\n"
        f"–†–µ—Ç—Ä–∞–∏ AT: {runtime_settings.at_retries}\n"
        f"–¢–∞–π–º–∞—É—Ç OR: {runtime_settings.or_timeout}s\n"
        f"–¢–∞–π–º–∞—É—Ç AT: {runtime_settings.at_timeout}s\n"
        f"Reasoning: {'–í–∫–ª' if runtime_settings.reasoning_enabled else '–í—ã–∫–ª'}\n"
        f"Fallback OR‚ÜíAT: {'–í–∫–ª' if runtime_settings.or_to_at_fallback else '–í—ã–∫–ª'}"
    )
    send_message(vk, peer_id, text, keyboard=build_ai_settings_keyboard())

def handle_admin_ai_models(vk, peer_id: int, user_id: int, page: int = 0) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç AI –º–æ–¥–µ–ª–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    text = "ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ AI –º–æ–¥–µ–ª–∏:\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫."
    
    send_message(vk, peer_id, text, keyboard=build_ai_models_keyboard(page))

def handle_admin_presets(vk, peer_id: int, user_id: int) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ—Å–µ—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    text = "‚öôÔ∏è –ü—Ä–µ—Å–µ—Ç—ã AI –Ω–∞—Å—Ç—Ä–æ–µ–∫:\n\n"
    presets = AIPresets.list_presets()
    for preset in presets:
        text += f"‚Ä¢ {preset}\n"
    text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ—Å–µ—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è."
    
    send_message(vk, peer_id, text, keyboard=build_presets_keyboard())

def handle_admin_export_ai_settings(vk, peer_id: int, user_id: int) -> None:
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç AI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    settings_json = export_ai_settings()
    text = f"üì§ AI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã:\n\n```json\n{settings_json}\n```"
    send_message(vk, peer_id, text, keyboard=build_ai_settings_keyboard())

def handle_admin_import_ai_settings(vk, peer_id: int, user_id: int, settings_json: str) -> None:
    """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç AI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    if import_ai_settings(settings_json):
        text = "‚úÖ AI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!"
    else:
        text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç JSON."
    
    send_message(vk, peer_id, text, keyboard=build_ai_settings_keyboard())

def handle_admin_reset_ai_settings(vk, peer_id: int, user_id: int) -> None:
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç AI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    reset_ai_settings()
    text = "üîÑ AI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."
    send_message(vk, peer_id, text, keyboard=build_ai_settings_keyboard())

def handle_admin_apply_preset(vk, peer_id: int, user_id: int, preset_name: str) -> None:
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–µ—Å–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    if AIPresets.apply_preset(preset_name):
        text = f"‚úÖ –ü—Ä–µ—Å–µ—Ç '{preset_name}' –ø—Ä–∏–º–µ–Ω–µ–Ω!"
    else:
        text = f"‚ùå –ü—Ä–µ—Å–µ—Ç '{preset_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω."
    
    send_message(vk, peer_id, text, keyboard=build_presets_keyboard())

# ---------- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞: –±—ç–∫–∞–ø/–ª–∏—Å—Ç/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ ----------
def handle_admin_config_backup(vk, peer_id: int, user_id: int) -> None:
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é config.json"""
    path = backup_config_file()
    if path:
        text = f"‚úÖ –ë—ç–∫–∞–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω: {path}"
    else:
        text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø (–≤–æ–∑–º–æ–∂–Ω–æ, config.json –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)."
    send_message(vk, peer_id, text)

def handle_admin_config_list(vk, peer_id: int, user_id: int) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤"""
    backups = list_config_backups()
    if not backups:
        text = "‚ÑπÔ∏è –ë—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    else:
        lines = "\n".join(f"{idx+1}. {p}" for idx, p in enumerate(backups))
        text = f"üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –±—ç–∫–∞–ø—ã:\n\n{lines}\n\n–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: /config restore <–Ω–æ–º–µ—Ä>"
    send_message(vk, peer_id, text)

def handle_admin_config_restore(vk, peer_id: int, user_id: int, idx_str: str) -> None:
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –±—ç–∫–∞–ø–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É –∏–∑ —Å–ø–∏—Å–∫–∞"""
    try:
        idx = int(idx_str) - 1
    except Exception:
        send_message(vk, peer_id, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /config restore <–Ω–æ–º–µ—Ä> (—Å–º. /config list)")
        return
    backups = list_config_backups()
    if idx < 0 or idx >= len(backups):
        send_message(vk, peer_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –±—ç–∫–∞–ø–∞")
        return
    ok = restore_config_from_backup(backups[idx])
    if ok:
        text = f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑: {backups[idx]}"
    else:
        text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
    send_message(vk, peer_id, text)

# ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ----------
def send_message(vk, peer_id: int, text: str, keyboard: Optional[Dict] = None) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
    try:
        vk.messages.send(
            peer_id=peer_id,
            message=text,
            keyboard=keyboard,
            random_id=0
        )
    except Exception as e:
        logging.error(f"Error sending message: {e}")

def is_admin(user_id: int, admin_ids: set) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return user_id in admin_ids

def get_user_role(user_id: int) -> UserRole:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É —Ä–æ–ª–µ–π
    return UserRole.USER

def create_user_profile(user_id: int) -> UserProfile:
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return UserProfile(
        user_id=user_id,
        role=UserRole.USER,
        created_at=time.time()
    )

def create_chat_settings(chat_id: int) -> ChatSettings:
    """–°–æ–∑–¥–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞"""
    return ChatSettings(
        chat_id=chat_id,
        created_at=time.time()
    )