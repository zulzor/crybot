"""
–ò–≥—Ä–æ–≤–æ–π –º–æ–¥—É–ª—å –¥–ª—è –±–æ—Ç–∞
"""
import random
import time
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from enum import Enum

# ---------- –ò–≥—Ä–∞ "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ" ----------
@dataclass
class GuessNumberSession:
    creator_id: int
    number: int = 0
    attempts: int = 0
    max_attempts: int = 10
    started: bool = False
    start_time: float = 0.0
    players: List[int] = None
    scores: Dict[int, int] = None
    
    def __post_init__(self):
        if self.players is None:
            self.players = []
        if self.scores is None:
            self.scores = {}
        if not self.started:
            self.number = random.randint(1, 100)
    
    def start(self):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä—É"""
        self.started = True
        self.start_time = time.time()
        self.attempts = 0
        if self.number == 0:
            self.number = random.randint(1, 100)
    
    def guess(self, user_id: int, guess: int) -> Tuple[str, bool]:
        """–î–µ–ª–∞–µ—Ç –ø–æ–ø—ã—Ç–∫—É —É–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ"""
        if not self.started:
            return "–ò–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å!", False
        
        if self.attempts >= self.max_attempts:
            return f"–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ß–∏—Å–ª–æ –±—ã–ª–æ {self.number}", True
        
        self.attempts += 1
        
        if guess == self.number:
            # –ò–≥—Ä–æ–∫ —É–≥–∞–¥–∞–ª!
            score = max(1, self.max_attempts - self.attempts + 1) * 10
            self.scores[user_id] = score
            return f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ {self.number} –∑–∞ {self.attempts} –ø–æ–ø—ã—Ç–æ–∫! –û—á–∫–∏: {score}", True
        elif guess < self.number:
            return f"üìà –ë–æ–ª—å—à–µ! –ü–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: {self.max_attempts - self.attempts}", False
        else:
            return f"üìâ –ú–µ–Ω—å—à–µ! –ü–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: {self.max_attempts - self.attempts}", False

# ---------- –ò–≥—Ä–∞ "–ö–∞–ª—å–º–∞—Ä" ----------
@dataclass
class SquidGameSession:
    players: List[int] = None
    current_round: int = 0
    max_rounds: int = 5
    started: bool = False
    start_time: float = 0.0
    scores: Dict[int, int] = None
    eliminated: List[int] = None
    
    def __post_init__(self):
        if self.players is None:
            self.players = []
        if self.scores is None:
            self.scores = {}
        if self.eliminated is None:
            self.eliminated = []
    
    def add_player(self, user_id: int) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–≥—Ä–æ–∫–∞"""
        if user_id in self.players:
            return "–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ!"
        
        if self.started:
            return "–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å!"
        
        self.players.append(user_id)
        self.scores[user_id] = 0
        return f"‚úÖ –ò–≥—Ä–æ–∫ {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–≥—Ä—É!"
    
    def start_game(self) -> str:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä—É"""
        # –í —Ç–µ—Å—Ç–æ–≤–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –¥–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—Ç –¥–∞–∂–µ —Å 1 –∏–≥—Ä–æ–∫–æ–º
        if len(self.players) < 1:
            return "–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 1 –∏–≥—Ä–æ–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã!"
        
        self.started = True
        self.start_time = time.time()
        self.current_round = 1
        
        return f"üéÆ –ò–≥—Ä–∞ '–ö–∞–ª—å–º–∞—Ä' –Ω–∞—á–∞–ª–∞—Å—å!\n–ò–≥—Ä–æ–∫–æ–≤: {len(self.players)}\n–ü–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥: '–ö—Ä–∞—Å–Ω—ã–π —Å–≤–µ—Ç, –∑–µ–ª–µ–Ω—ã–π —Å–≤–µ—Ç'"

# ---------- –ò–≥—Ä–∞ "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞" ----------
@dataclass
class QuizSession:
    players: List[int] = None
    current_question: int = 0
    questions: List[Dict] = None
    scores: Dict[int, int] = None
    answers: Dict[int, Dict[int, int]] = None
    started: bool = False
    start_time: float = 0.0
    
    def __post_init__(self):
        if self.players is None:
            self.players = []
        if self.scores is None:
            self.scores = {}
        if self.answers is None:
            self.answers = {}
        if self.questions is None:
            self.questions = [
                {"question": "–°—Ç–æ–ª–∏—Ü–∞ –†–æ—Å—Å–∏–∏?", "options": ["–ú–æ—Å–∫–≤–∞", "–°–ü–±", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"], "correct": 0},
                {"question": "2+2=?", "options": ["3", "4", "5"], "correct": 1}
            ]
    
    def add_player(self, user_id: int) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–≥—Ä–æ–∫–∞"""
        if user_id in self.players:
            return "–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ!"
        
        if self.started:
            return "–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å!"
        
        self.players.append(user_id)
        self.scores[user_id] = 0
        self.answers[user_id] = {}
        return f"‚úÖ –ò–≥—Ä–æ–∫ {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!"

# ---------- –ò–≥—Ä–∞ "–ú–∞—Ñ–∏—è" ----------
@dataclass
class MafiaSession:
    players: List[int] = None
    phase: str = "waiting"
    current_round: int = 0
    max_rounds: int = 10
    started: bool = False
    start_time: float = 0.0
    
    def __post_init__(self):
        if self.players is None:
            self.players = []
    
    def add_player(self, user_id: int) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–≥—Ä–æ–∫–∞"""
        if user_id in self.players:
            return "–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ!"
        
        if self.started:
            return "–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å!"
        
        self.players.append(user_id)
        return f"‚úÖ –ò–≥—Ä–æ–∫ {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–≥—Ä—É!"
    
    def start_game(self) -> str:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä—É"""
        # –í —Ç–µ—Å—Ç–æ–≤–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –¥–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—Ç –¥–∞–∂–µ —Å 1 –∏–≥—Ä–æ–∫–æ–º
        if len(self.players) < 1:
            return "–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 1 –∏–≥—Ä–æ–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã!"
        
        self.started = True
        self.start_time = time.time()
        self.current_round = 1
        self.phase = "night"
        
        return f"üé≠ –ò–≥—Ä–∞ '–ú–∞—Ñ–∏—è' –Ω–∞—á–∞–ª–∞—Å—å!\n–ò–≥—Ä–æ–∫–æ–≤: {len(self.players)}\n–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–æ—á—å!"

# ---------- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∏–≥—Ä ----------
GUESS_SESSIONS: Dict[int, GuessNumberSession] = {}
SQUID_GAMES: Dict[int, SquidGameSession] = {}
QUIZ_SESSIONS: Dict[int, QuizSession] = {}
MAFIA_SESSIONS: Dict[int, MafiaSession] = {}

# ---------- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–∞–º–∏ ----------
def create_guess_game(peer_id: int, creator_id: int) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ'"""
    if peer_id in GUESS_SESSIONS:
        return "–í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞!"
    
    GUESS_SESSIONS[peer_id] = GuessNumberSession(creator_id=creator_id)
    return "üéØ –ò–≥—Ä–∞ '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ' —Å–æ–∑–¥–∞–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /guess <—á–∏—Å–ª–æ> –¥–ª—è –∏–≥—Ä—ã."

def create_squid_game(peer_id: int) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É '–ö–∞–ª—å–º–∞—Ä'"""
    if peer_id in SQUID_GAMES:
        return "–í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞!"
    
    SQUID_GAMES[peer_id] = SquidGameSession()
    return "üéÆ –ò–≥—Ä–∞ '–ö–∞–ª—å–º–∞—Ä' —Å–æ–∑–¥–∞–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /join –¥–ª—è —É—á–∞—Å—Ç–∏—è."

def create_quiz(peer_id: int) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É"""
    if peer_id in QUIZ_SESSIONS:
        return "–í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞!"
    
    QUIZ_SESSIONS[peer_id] = QuizSession()
    return "üéØ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /join –¥–ª—è —É—á–∞—Å—Ç–∏—è."

def create_mafia(peer_id: int) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É '–ú–∞—Ñ–∏—è'"""
    if peer_id in MAFIA_SESSIONS:
        return "–í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞!"
    
    MAFIA_SESSIONS[peer_id] = MafiaSession()
    return "üé≠ –ò–≥—Ä–∞ '–ú–∞—Ñ–∏—è' —Å–æ–∑–¥–∞–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /join –¥–ª—è —É—á–∞—Å—Ç–∏—è."