"""
–≠–∫–æ–Ω–æ–º–∏–∫–∞ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è CryBot
"""
import random
import time
from dataclasses import dataclass, field
from typing import Dict, List, Optional, Set, Tuple
from enum import Enum


# -------- –≠–∫–æ–Ω–æ–º–∏–∫–∞ --------
class Currency(Enum):
    RUB = "‚ÇΩ"
    USD = "$"
    EUR = "‚Ç¨"
    CRYCOIN = "ü™ô"


@dataclass
class UserWallet:
    user_id: int
    balance: Dict[Currency, int] = field(default_factory=lambda: {Currency.CRYCOIN: 1000})
    last_daily: float = 0
    daily_streak: int = 0
    total_earned: int = 0
    total_spent: int = 0


@dataclass
class ShopItem:
    id: str
    name: str
    description: str
    price: int
    currency: Currency
    category: str
    rarity: str  # common, rare, epic, legendary
    effects: Dict[str, float] = field(default_factory=dict)
    is_consumable: bool = False
    stack_size: int = 1


@dataclass
class UserInventory:
    user_id: int
    items: Dict[str, int] = field(default_factory=dict)  # item_id -> quantity
    equipped: Dict[str, str] = field(default_factory=dict)  # slot -> item_id


class EconomyManager:
    def __init__(self):
        self.wallets: Dict[int, UserWallet] = {}
        self.inventories: Dict[int, UserInventory] = {}
        self.shop_items: Dict[str, ShopItem] = {}
        self._init_shop()
    
    def _init_shop(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞–≥–∞–∑–∏–Ω–∞"""
        # –ë—É—Å—Ç–µ—Ä—ã –¥–ª—è –∏–≥—Ä
        self.shop_items["game_boost"] = ShopItem(
            id="game_boost",
            name="üéÆ –ò–≥—Ä–æ–≤–æ–π –±—É—Å—Ç–µ—Ä",
            description="+50% –æ—á–∫–æ–≤ –≤ –∏–≥—Ä–∞—Ö –Ω–∞ 1 —á–∞—Å",
            price=100,
            currency=Currency.CRYCOIN,
            category="boosters",
            rarity="common",
            effects={"game_score_multiplier": 1.5},
            is_consumable=True
        )
        
        # –ö–æ—Å–º–µ—Ç–∏–∫–∞
        self.shop_items["vip_badge"] = ShopItem(
            id="vip_badge",
            name="üëë VIP –∑–Ω–∞—á–æ–∫",
            description="–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∑–Ω–∞—á–æ–∫ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è",
            price=500,
            currency=Currency.CRYCOIN,
            category="cosmetics",
            rarity="rare",
            effects={"profile_badge": "vip"}
        )
        
        # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        self.shop_items["extra_life"] = ShopItem(
            id="extra_life",
            name="üíñ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∂–∏–∑–Ω—å",
            description="+1 –∂–∏–∑–Ω—å –≤ –∏–≥—Ä–∞—Ö",
            price=200,
            currency=Currency.CRYCOIN,
            category="functional",
            rarity="common",
            effects={"extra_lives": 1},
            is_consumable=True
        )
    
    def get_wallet(self, user_id: int) -> UserWallet:
        if user_id not in self.wallets:
            self.wallets[user_id] = UserWallet(user_id=user_id)
        return self.wallets[user_id]
    
    def get_inventory(self, user_id: int) -> UserInventory:
        if user_id not in self.inventories:
            self.inventories[user_id] = UserInventory(user_id=user_id)
        return self.inventories[user_id]
    
    def add_money(self, user_id: int, amount: int, currency: Currency = Currency.CRYCOIN) -> str:
        wallet = self.get_wallet(user_id)
        if currency not in wallet.balance:
            wallet.balance[currency] = 0
        
        wallet.balance[currency] += amount
        wallet.total_earned += amount
        
        return f"üí∞ +{amount} {currency.value}\n–ë–∞–ª–∞–Ω—Å: {wallet.balance[currency]} {currency.value}"
    
    def spend_money(self, user_id: int, amount: int, currency: Currency = Currency.CRYCOIN) -> bool:
        wallet = self.get_wallet(user_id)
        if currency not in wallet.balance or wallet.balance[currency] < amount:
            return False
        
        wallet.balance[currency] -= amount
        wallet.total_spent += amount
        return True
    
    def daily_bonus(self, user_id: int) -> str:
        wallet = self.get_wallet(user_id)
        now = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 24 —á–∞—Å–∞
        if now - wallet.last_daily < 86400:  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            remaining = int(86400 - (now - wallet.last_daily))
            hours = remaining // 3600
            minutes = (remaining % 3600) // 60
            return f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å —á–µ—Ä–µ–∑ {hours}—á {minutes}–º"
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ç—Ä–∏–∫
        wallet.daily_streak += 1
        wallet.last_daily = now
        
        # –ë–æ–Ω—É—Å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ç—Ä–∏–∫–∞
        base_bonus = 100
        streak_bonus = min(wallet.daily_streak * 10, 200)  # –ú–∞–∫—Å–∏–º—É–º +200 –∑–∞ —Å—Ç—Ä–∏–∫
        total_bonus = base_bonus + streak_bonus
        
        wallet.balance[Currency.CRYCOIN] += total_bonus
        wallet.total_earned += total_bonus
        
        return (
            f"üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å!\n"
            f"üí∞ +{total_bonus} ü™ô\n"
            f"üî• –°—Ç—Ä–∏–∫: {wallet.daily_streak} –¥–Ω–µ–π\n"
            f"–ë–∞–ª–∞–Ω—Å: {wallet.balance[Currency.CRYCOIN]} ü™ô"
        )
    
    def buy_item(self, user_id: int, item_id: str) -> str:
        if item_id not in self.shop_items:
            return "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        item = self.shop_items[item_id]
        wallet = self.get_wallet(user_id)
        inventory = self.get_inventory(user_id)
        
        if not self.spend_money(user_id, item.price, item.currency):
            return f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ: {item.price} {item.currency.value}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        if item_id in inventory.items:
            inventory.items[item_id] += item.stack_size
        else:
            inventory.items[item_id] = item.stack_size
        
        return (
            f"‚úÖ –ü–æ–∫—É–ø–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"üéÅ {item.name}\n"
            f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {item.price} {item.currency.value}\n"
            f"üì¶ –í –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ: {inventory.items[item_id]}"
        )
    
    def get_shop(self, category: Optional[str] = None) -> str:
        items = self.shop_items.values()
        if category:
            items = [item for item in items if item.category == category]
        
        if not items:
            return "‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        result = "üõí –ú–∞–≥–∞–∑–∏–Ω:\n\n"
        for item in items:
            result += (
                f"üéÅ {item.name}\n"
                f"üìù {item.description}\n"
                f"üí∞ {item.price} {item.currency.value}\n"
                f"‚≠ê {item.rarity.upper()}\n"
                f"üìÇ {item.category}\n\n"
            )
        
        return result


# -------- –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ --------
class RelationshipStatus(Enum):
    SINGLE = "—Ö–æ–ª–æ—Å—Ç"
    DATING = "–≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö"
    MARRIED = "–∂–µ–Ω–∞—Ç/–∑–∞–º—É–∂–µ–º"
    DIVORCED = "–≤ —Ä–∞–∑–≤–æ–¥–µ"


@dataclass
class UserProfile:
    user_id: int
    name: str
    bio: str = ""
    avatar: str = "üë§"
    level: int = 1
    experience: int = 0
    relationship_status: RelationshipStatus = RelationshipStatus.SINGLE
    partner_id: Optional[int] = None
    clan_id: Optional[int] = None
    friends: Set[int] = field(default_factory=set)
    followers: Set[int] = field(default_factory=set)
    following: Set[int] = field(default_factory=set)
    created_at: float = field(default_factory=time.time)
    last_online: float = field(default_factory=time.time)


@dataclass
class Clan:
    id: int
    name: str
    description: str
    leader_id: int
    members: Set[int] = field(default_factory=set)
    level: int = 1
    experience: int = 0
    treasury: int = 0
    created_at: float = field(default_factory=time.time)
    is_public: bool = True


@dataclass
class Marriage:
    id: int
    partner1_id: int
    partner2_id: int
    married_at: float
    is_active: bool = True
    divorce_requested_by: Optional[int] = None


class SocialManager:
    def __init__(self):
        self.profiles: Dict[int, UserProfile] = {}
        self.clans: Dict[int, Clan] = {}
        self.marriages: Dict[int, Marriage] = {}
        self.clan_counter = 1
    
    def get_profile(self, user_id: int) -> UserProfile:
        if user_id not in self.profiles:
            self.profiles[user_id] = UserProfile(user_id=user_id, name=f"–ò–≥—Ä–æ–∫ {user_id}")
        return self.profiles[user_id]
    
    def update_profile(self, user_id: int, **kwargs) -> str:
        profile = self.get_profile(user_id)
        
        for key, value in kwargs.items():
            if hasattr(profile, key):
                setattr(profile, key, value)
        
        profile.last_online = time.time()
        return "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω"
    
    def add_friend(self, user_id: int, friend_id: int) -> str:
        if user_id == friend_id:
            return "‚ùå –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è –≤ –¥—Ä—É–∑—å—è"
        
        profile = self.get_profile(user_id)
        friend_profile = self.get_profile(friend_id)
        
        if friend_id in profile.friends:
            return "‚ùå –£–∂–µ –≤ –¥—Ä—É–∑—å—è—Ö"
        
        profile.friends.add(friend_id)
        friend_profile.followers.add(user_id)
        
        return f"‚úÖ {friend_profile.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥—Ä—É–∑—å—è"
    
    def remove_friend(self, user_id: int, friend_id: int) -> str:
        profile = self.get_profile(user_id)
        friend_profile = self.get_profile(friend_id)
        
        if friend_id not in profile.friends:
            return "‚ùå –ù–µ –≤ –¥—Ä—É–∑—å—è—Ö"
        
        profile.friends.discard(friend_id)
        friend_profile.followers.discard(user_id)
        
        return f"‚ùå {friend_profile.name} —É–¥–∞–ª—ë–Ω –∏–∑ –¥—Ä—É–∑–µ–π"
    
    def create_clan(self, user_id: int, name: str, description: str) -> str:
        profile = self.get_profile(user_id)
        
        if profile.clan_id:
            return "‚ùå –í—ã —É–∂–µ –≤ –∫–ª–∞–Ω–µ"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏
        for clan in self.clans.values():
            if clan.name.lower() == name.lower():
                return "‚ùå –ö–ª–∞–Ω —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        
        clan_id = self.clan_counter
        self.clan_counter += 1
        
        clan = Clan(
            id=clan_id,
            name=name,
            description=description,
            leader_id=user_id
        )
        clan.members.add(user_id)
        
        self.clans[clan_id] = clan
        profile.clan_id = clan_id
        
        return (
            f"üè∞ –ö–ª–∞–Ω '{name}' —Å–æ–∑–¥–∞–Ω!\n"
            f"üëë –õ–∏–¥–µ—Ä: {profile.name}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}"
        )
    
    def join_clan(self, user_id: int, clan_id: int) -> str:
        if clan_id not in self.clans:
            return "‚ùå –ö–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        profile = self.get_profile(user_id)
        clan = self.clans[clan_id]
        
        if profile.clan_id:
            return "‚ùå –í—ã —É–∂–µ –≤ –∫–ª–∞–Ω–µ"
        
        if not clan.is_public:
            return "‚ùå –ö–ª–∞–Ω –∑–∞–∫—Ä—ã—Ç –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è"
        
        clan.members.add(user_id)
        profile.clan_id = clan_id
        
        return f"‚úÖ –í—ã –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –∫–ª–∞–Ω '{clan.name}'"
    
    def leave_clan(self, user_id: int) -> str:
        profile = self.get_profile(user_id)
        
        if not profile.clan_id:
            return "‚ùå –í—ã –Ω–µ –≤ –∫–ª–∞–Ω–µ"
        
        clan = self.clans[profile.clan_id]
        
        if clan.leader_id == user_id:
            return "‚ùå –õ–∏–¥–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫–∏–Ω—É—Ç—å –∫–ª–∞–Ω. –ü–µ—Ä–µ–¥–∞–π—Ç–µ –ª–∏–¥–µ—Ä—Å—Ç–≤–æ –∏–ª–∏ —Ä–∞—Å–ø—É—Å—Ç–∏—Ç–µ –∫–ª–∞–Ω"
        
        clan.members.discard(user_id)
        profile.clan_id = None
        
        return f"‚úÖ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∫–ª–∞–Ω '{clan.name}'"
    
    def propose_marriage(self, user_id: int, partner_id: int) -> str:
        if user_id == partner_id:
            return "‚ùå –ù–µ–ª—å–∑—è –∂–µ–Ω–∏—Ç—å—Å—è –Ω–∞ —Å–µ–±–µ"
        
        profile = self.get_profile(user_id)
        partner_profile = self.get_profile(partner_id)
        
        if profile.relationship_status != RelationshipStatus.SINGLE:
            return "‚ùå –í—ã —É–∂–µ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö"
        
        if partner_profile.relationship_status != RelationshipStatus.SINGLE:
            return f"‚ùå {partner_profile.name} —É–∂–µ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö"
        
        # –°–æ–∑–¥–∞—ë–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        marriage_id = len(self.marriages) + 1
        marriage = Marriage(
            id=marriage_id,
            partner1_id=user_id,
            partner2_id=partner_id,
            married_at=time.time()
        )
        
        self.marriages[marriage_id] = marriage
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
        profile.relationship_status = RelationshipStatus.MARRIED
        profile.partner_id = partner_id
        partner_profile.relationship_status = RelationshipStatus.MARRIED
        partner_profile.partner_id = user_id
        
        return (
            f"üíç –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –±—Ä–∞–∫–æ–º!\n"
            f"üë∞ {profile.name} –∏ ü§µ {partner_profile.name}\n"
            f"üíï –¢–µ–ø–µ—Ä—å –≤—ã –º—É–∂ –∏ –∂–µ–Ω–∞!"
        )
    
    def request_divorce(self, user_id: int) -> str:
        profile = self.get_profile(user_id)
        
        if profile.relationship_status != RelationshipStatus.MARRIED:
            return "‚ùå –í—ã –Ω–µ –∂–µ–Ω–∞—Ç—ã"
        
        # –ù–∞—Ö–æ–¥–∏–º –±—Ä–∞–∫
        for marriage in self.marriages.values():
            if (marriage.partner1_id == user_id or marriage.partner2_id == user_id) and marriage.is_active:
                if marriage.divorce_requested_by:
                    if marriage.divorce_requested_by == user_id:
                        return "‚ùå –í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ä–∞–∑–≤–æ–¥"
                    else:
                        # –í—Ç–æ—Ä–æ–π –ø–∞—Ä—Ç–Ω—ë—Ä —Ç–æ–∂–µ —Ö–æ—á–µ—Ç —Ä–∞–∑–≤–æ–¥
                        return self._process_divorce(marriage)
                else:
                    marriage.divorce_requested_by = user_id
                    return "üìù –ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ä–∞–∑–≤–æ–¥ –ø–æ–¥–∞–Ω–æ. –ü–∞—Ä—Ç–Ω—ë—Ä –¥–æ–ª–∂–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
        
        return "‚ùå –ë—Ä–∞–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    def _process_divorce(self, marriage: Marriage) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–≤–æ–¥–∞"""
        marriage.is_active = False
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª–∏
        partner1 = self.get_profile(marriage.partner1_id)
        partner2 = self.get_profile(marriage.partner2_id)
        
        partner1.relationship_status = RelationshipStatus.DIVORCED
        partner1.partner_id = None
        partner2.relationship_status = RelationshipStatus.DIVORCED
        partner2.partner_id = None
        
        return "üíî –†–∞–∑–≤–æ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω"


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
economy_manager = EconomyManager()
social_manager = SocialManager()