"""
–≠–∫–æ–Ω–æ–º–∏–∫–∞ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è CryBot
"""
import random
import time
from dataclasses import dataclass, field
from typing import Dict, List, Optional, Set, Tuple
from enum import Enum
from storage import get_storage_from_env


# -------- –≠–∫–æ–Ω–æ–º–∏–∫–∞ --------
class Currency(Enum):
    RUB = "‚ÇΩ"
    USD = "$"
    EUR = "‚Ç¨"
    CRYCOIN = "ü™ô"


@dataclass
class UserWallet:
    user_id: int
    balance: Dict[Currency, int] = field(default_factory=lambda: {Currency.CRYCOIN: 1000})
    last_daily: float = 0
    daily_streak: int = 0
    total_earned: int = 0
    total_spent: int = 0


@dataclass
class ShopItem:
    id: str
    name: str
    description: str
    price: int
    currency: Currency
    category: str
    rarity: str  # common, rare, epic, legendary
    effects: Dict[str, float] = field(default_factory=dict)
    is_consumable: bool = False
    stack_size: int = 1


@dataclass
class UserInventory:
    user_id: int
    items: Dict[str, int] = field(default_factory=dict)  # item_id -> quantity
    equipped: Dict[str, str] = field(default_factory=dict)  # slot -> item_id


class EconomyManager:
    def __init__(self):
        self.wallets: Dict[int, UserWallet] = {}
        self.inventories: Dict[int, UserInventory] = {}
        self.shop_items: Dict[str, ShopItem] = {}
        self.tournaments: Dict[str, Tournament] = {}
        self.leaderboards: Dict[str, Dict[int, Leaderboard]] = {}  # game_type -> user_id -> Leaderboard
        self.achievements: Dict[str, Achievement] = {}
        self.user_achievements: Dict[int, Dict[str, UserAchievement]] = {}  # user_id -> achievement_id -> UserAchievement
        self._init_shop()
        self._init_achievements()
        self._storage = get_storage_from_env()
    
    def _init_shop(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞–≥–∞–∑–∏–Ω–∞"""
        # –ë—É—Å—Ç–µ—Ä—ã –¥–ª—è –∏–≥—Ä
        self.shop_items["game_boost"] = ShopItem(
            id="game_boost",
            name="üéÆ –ò–≥—Ä–æ–≤–æ–π –±—É—Å—Ç–µ—Ä",
            description="+50% –æ—á–∫–æ–≤ –≤ –∏–≥—Ä–∞—Ö –Ω–∞ 1 —á–∞—Å",
            price=100,
            currency=Currency.CRYCOIN,
            category="boosters",
            rarity="common",
            effects={"game_score_multiplier": 1.5},
            is_consumable=True
        )
        
        # –ö–æ—Å–º–µ—Ç–∏–∫–∞
        self.shop_items["vip_badge"] = ShopItem(
            id="vip_badge",
            name="üëë VIP –∑–Ω–∞—á–æ–∫",
            description="–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∑–Ω–∞—á–æ–∫ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è",
            price=500,
            currency=Currency.CRYCOIN,
            category="cosmetics",
            rarity="rare",
            effects={"profile_badge": "vip"}
        )
        
        # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        self.shop_items["extra_life"] = ShopItem(
            id="extra_life",
            name="üíñ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∂–∏–∑–Ω—å",
            description="+1 –∂–∏–∑–Ω—å –≤ –∏–≥—Ä–∞—Ö",
            price=200,
            currency=Currency.CRYCOIN,
            category="functional",
            rarity="common",
            effects={"extra_lives": 1},
            is_consumable=True
        )
        
        # –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∫—Ä–∞—Ñ—Ç–∏–Ω–≥–∞
        self.shop_items["wood"] = ShopItem(
            id="wood",
            name="ü™µ –î–µ—Ä–µ–≤–æ",
            description="–ë–∞–∑–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –∫—Ä–∞—Ñ—Ç–∏–Ω–≥–∞",
            price=10,
            currency=Currency.CRYCOIN,
            category="materials",
            rarity="common",
            effects={},
            is_consumable=True
        )
        
        self.shop_items["iron"] = ShopItem(
            id="iron",
            name="‚õèÔ∏è –ñ–µ–ª–µ–∑–æ",
            description="–ü—Ä–æ—á–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –∫—Ä–∞—Ñ—Ç–∏–Ω–≥–∞",
            price=25,
            currency=Currency.CRYCOIN,
            category="materials",
            rarity="common",
            effects={},
            is_consumable=True
        )
        
        self.shop_items["gem"] = ShopItem(
            id="gem",
            name="üíé –î—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–π –∫–∞–º–µ–Ω—å",
            description="–†–µ–¥–∫–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —ç–ª–∏—Ç–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤",
            price=100,
            currency=Currency.CRYCOIN,
            category="materials",
            rarity="rare",
            effects={},
            is_consumable=True
        )
        
        # –ì–æ—Ç–æ–≤—ã–µ –∫—Ä–∞—Ñ—Ç–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        self.shop_items["sword"] = ShopItem(
            id="sword",
            name="‚öîÔ∏è –ú–µ—á",
            description="–û—Ä—É–∂–∏–µ, —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –∏–∑ –∂–µ–ª–µ–∑–∞",
            price=150,
            currency=Currency.CRYCOIN,
            category="crafted",
            rarity="rare",
            effects={"attack": 10},
            is_consumable=False
        )
        
        self.shop_items["shield"] = ShopItem(
            id="shield",
            name="üõ°Ô∏è –©–∏—Ç",
            description="–ó–∞—â–∏—Ç–∞, —Å–æ–∑–¥–∞–Ω–Ω–∞—è –∏–∑ –¥–µ—Ä–µ–≤–∞ –∏ –∂–µ–ª–µ–∑–∞",
            price=120,
            currency=Currency.CRYCOIN,
            category="crafted",
            rarity="rare",
            effects={"defense": 8},
            is_consumable=False
        )
    
    def _init_achievements(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –∏–≥—Ä—ã
        self.achievements["first_win"] = Achievement(
            id="first_win",
            name="üéØ –ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞",
            description="–í—ã–∏–≥—Ä–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∏–≥—Ä—É",
            icon="üéØ",
            condition="games_won_1",
            reward=50
        )
        
        self.achievements["game_master"] = Achievement(
            id="game_master",
            name="üèÜ –ú–∞—Å—Ç–µ—Ä –∏–≥—Ä",
            description="–í—ã–∏–≥—Ä–∞–π—Ç–µ 10 –∏–≥—Ä",
            icon="üèÜ",
            condition="games_won_10",
            reward=200
        )
        
        self.achievements["high_scorer"] = Achievement(
            id="high_scorer",
            name="‚≠ê –í—ã—Å–æ–∫–∏–π —Å—á—ë—Ç",
            description="–ù–∞–±–µ—Ä–∏—Ç–µ 1000 –æ—á–∫–æ–≤ –≤ –∏–≥—Ä–∞—Ö",
            icon="‚≠ê",
            condition="total_score_1000",
            reward=300
        )
        
        # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —ç–∫–æ–Ω–æ–º–∏–∫—É
        self.achievements["rich_player"] = Achievement(
            id="rich_player",
            name="üí∞ –ë–æ–≥–∞—á",
            description="–ù–∞–∫–æ–ø–∏—Ç–µ 5000 –º–æ–Ω–µ—Ç",
            icon="üí∞",
            condition="total_money_5000",
            reward=500
        )
        
        self.achievements["craftsman"] = Achievement(
            id="craftsman",
            name="üî® –ú–∞—Å—Ç–µ—Ä-–∫—Ä–∞—Ñ—Ç–µ—Ä",
            description="–°–æ–∑–¥–∞–π—Ç–µ 5 –ø—Ä–µ–¥–º–µ—Ç–æ–≤",
            icon="üî®",
            condition="items_crafted_5",
            reward=150
        )
        
        # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ
        self.achievements["social_butterfly"] = Achievement(
            id="social_butterfly",
            name="ü¶ã –û–±—â–∏—Ç–µ–ª—å–Ω—ã–π",
            description="–î–æ–±–∞–≤—å—Ç–µ 5 –¥—Ä—É–∑–µ–π",
            icon="ü¶ã",
            condition="friends_5",
            reward=100
        )
        
        self.achievements["married"] = Achievement(
            id="married",
            name="üíç –ñ–µ–Ω–∞—Ç",
            description="–í—Å—Ç—É–ø–∏—Ç–µ –≤ –±—Ä–∞–∫",
            icon="üíç",
            condition="married_1",
            reward=250
        )
    
    def check_achievements(self, user_id: int, action: str, value: int = 1) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–¥–∞—á–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        unlocked = []
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stats = self._get_user_stats(user_id)
        
        for achievement in self.achievements.values():
            if achievement.id in self.user_achievements.get(user_id, {}):
                continue  # –£–∂–µ –ø–æ–ª—É—á–µ–Ω–æ
            
            if self._check_achievement_condition(achievement, stats, action, value):
                # –í—ã–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
                if user_id not in self.user_achievements:
                    self.user_achievements[user_id] = {}
                
                self.user_achievements[user_id][achievement.id] = UserAchievement(
                    user_id=user_id,
                    achievement_id=achievement.id
                )
                
                # –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
                self.add_money(user_id, achievement.reward)
                unlocked.append(f"{achievement.icon} {achievement.name} (+{achievement.reward} ü™ô)")
        
        return unlocked
    
    def _get_user_stats(self, user_id: int) -> Dict[str, int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        stats = {
            "games_won": 0,
            "total_score": 0,
            "total_money": 0,
            "items_crafted": 0,
            "friends": 0,
            "married": 0
        }
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        for game_type in self.leaderboards:
            if user_id in self.leaderboards[game_type]:
                lb = self.leaderboards[game_type][user_id]
                stats["games_won"] += lb.wins
                stats["total_score"] += lb.score
        
        wallet = self.get_wallet(user_id)
        stats["total_money"] = wallet.total_earned
        
        return stats
    
    def _check_achievement_condition(self, achievement: Achievement, stats: Dict[str, int], action: str, value: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        condition = achievement.condition
        
        if condition == "games_won_1" and stats["games_won"] >= 1:
            return True
        elif condition == "games_won_10" and stats["games_won"] >= 10:
            return True
        elif condition == "total_score_1000" and stats["total_score"] >= 1000:
            return True
        elif condition == "total_money_5000" and stats["total_money"] >= 5000:
            return True
        elif condition == "items_crafted_5" and stats["items_crafted"] >= 5:
            return True
        elif condition == "friends_5" and stats["friends"] >= 5:
            return True
        elif condition == "married_1" and stats["married"] >= 1:
            return True
        
        return False
    
    def get_user_achievements(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_achievements:
            return "üèÜ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"
        
        user_achs = self.user_achievements[user_id]
        result = "üèÜ –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n\n"
        
        for ach_id, user_ach in user_achs.items():
            achievement = self.achievements.get(ach_id)
            if achievement:
                result += f"{achievement.icon} {achievement.name}\n"
                result += f"   {achievement.description}\n"
                result += f"   –ü–æ–ª—É—á–µ–Ω–æ: {time.strftime('%d.%m.%Y', time.localtime(user_ach.unlocked_at))}\n\n"
        
        return result
    
    def get_wallet(self, user_id: int) -> UserWallet:
        if user_id in self.wallets:
            return self.wallets[user_id]
        # –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        data = self._storage.get("wallets", str(user_id))
        if data:
            w = UserWallet(user_id=int(data.get("user_id", user_id)))
            w.balance = {Currency[k]: v for k, v in data.get("balance", {}).items()} if data.get("balance") else w.balance
            w.last_daily = float(data.get("last_daily", 0))
            w.daily_streak = int(data.get("daily_streak", 0))
            w.total_earned = int(data.get("total_earned", 0))
            w.total_spent = int(data.get("total_spent", 0))
            self.wallets[user_id] = w
            return w
        w = UserWallet(user_id=user_id)
        self.wallets[user_id] = w
        return w
    
    def get_inventory(self, user_id: int) -> UserInventory:
        if user_id in self.inventories:
            return self.inventories[user_id]
        data = self._storage.get("inventories", str(user_id))
        if data:
            inv = UserInventory(user_id=int(data.get("user_id", user_id)))
            inv.items = {str(k): int(v) for k, v in data.get("items", {}).items()}
            inv.equipped = {str(k): str(v) for k, v in data.get("equipped", {}).items()}
            self.inventories[user_id] = inv
            return inv
        inv = UserInventory(user_id=user_id)
        self.inventories[user_id] = inv
        return inv
    
    def add_money(self, user_id: int, amount: int, currency: Currency = Currency.CRYCOIN) -> str:
        wallet = self.get_wallet(user_id)
        if currency not in wallet.balance:
            wallet.balance[currency] = 0
        
        wallet.balance[currency] += amount
        wallet.total_earned += amount
        # persist
        self._storage.set("wallets", str(user_id), {
            "user_id": user_id,
            "balance": {k.name: v for k, v in wallet.balance.items()},
            "last_daily": wallet.last_daily,
            "daily_streak": wallet.daily_streak,
            "total_earned": wallet.total_earned,
            "total_spent": wallet.total_spent,
        })
        
        return f"üí∞ +{amount} {currency.value}\n–ë–∞–ª–∞–Ω—Å: {wallet.balance[currency]} {currency.value}"
    
    def spend_money(self, user_id: int, amount: int, currency: Currency = Currency.CRYCOIN) -> bool:
        wallet = self.get_wallet(user_id)
        if currency not in wallet.balance or wallet.balance[currency] < amount:
            return False
        
        wallet.balance[currency] -= amount
        wallet.total_spent += amount
        self._storage.set("wallets", str(user_id), {
            "user_id": user_id,
            "balance": {k.name: v for k, v in wallet.balance.items()},
            "last_daily": wallet.last_daily,
            "daily_streak": wallet.daily_streak,
            "total_earned": wallet.total_earned,
            "total_spent": wallet.total_spent,
        })
        return True
    
    def craft_item(self, user_id: int, recipe_name: str) -> str:
        """–ö—Ä–∞—Ñ—Ç–∏–Ω–≥ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
        recipes = {
            "sword": {
                "materials": {"iron": 3, "wood": 1},
                "result": "sword",
                "name": "‚öîÔ∏è –ú–µ—á"
            },
            "shield": {
                "materials": {"iron": 2, "wood": 2},
                "result": "shield", 
                "name": "üõ°Ô∏è –©–∏—Ç"
            },
            "magic_staff": {
                "materials": {"wood": 2, "gem": 1},
                "result": "magic_staff",
                "name": "üîÆ –ú–∞–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Å–æ—Ö"
            }
        }
        
        if recipe_name not in recipes:
            return "‚ùå –†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        recipe = recipes[recipe_name]
        inventory = self.get_inventory(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
        for material, amount in recipe["materials"].items():
            if inventory.items.get(material, 0) < amount:
                return f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {material} (–Ω—É–∂–Ω–æ {amount})"
        
        # –¢—Ä–∞—Ç–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
        for material, amount in recipe["materials"].items():
            inventory.items[material] -= amount
            if inventory.items[material] <= 0:
                del inventory.items[material]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_item = recipe["result"]
        inventory.items[result_item] = inventory.items.get(result_item, 0) + 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        self._storage.set("inventories", str(user_id), {
            "user_id": user_id,
            "items": inventory.items,
            "equipped": inventory.equipped
        })
        
        return f"‚úÖ {recipe['name']} —Å–æ–∑–¥–∞–Ω!"
    
    def create_auction(self, user_id: int, item_id: str, quantity: int, starting_price: int) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–∞"""
        inventory = self.get_inventory(user_id)
        
        if item_id not in inventory.items or inventory.items[item_id] < quantity:
            return "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞"
        
        # –°–æ–∑–¥–∞–µ–º –∞—É–∫—Ü–∏–æ–Ω
        auction_id = f"auction_{user_id}_{int(time.time())}"
        auction = {
            "id": auction_id,
            "seller_id": user_id,
            "item_id": item_id,
            "quantity": quantity,
            "starting_price": starting_price,
            "current_price": starting_price,
            "highest_bidder": None,
            "created_at": time.time(),
            "ends_at": time.time() + 3600,  # 1 —á–∞—Å
            "is_active": True
        }
        
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        inventory.items[item_id] -= quantity
        if inventory.items[item_id] <= 0:
            del inventory.items[item_id]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–∫—Ü–∏–æ–Ω –∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        self._storage.set("auctions", auction_id, auction)
        self._storage.set("inventories", str(user_id), {
            "user_id": user_id,
            "items": inventory.items,
            "equipped": inventory.equipped
        })
        
        item = self.shop_items.get(item_id)
        item_name = item.name if item else item_id
        
        return f"üè∑Ô∏è –ê—É–∫—Ü–∏–æ–Ω —Å–æ–∑–¥–∞–Ω!\n\n–ü—Ä–µ–¥–º–µ—Ç: {item_name}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {starting_price} ü™ô\n\nID –∞—É–∫—Ü–∏–æ–Ω–∞: {auction_id}"
    
    def bid_on_auction(self, user_id: int, auction_id: str, bid_amount: int) -> str:
        """–°—Ç–∞–≤–∫–∞ –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω"""
        auction_data = self._storage.get("auctions", auction_id)
        if not auction_data:
            return "‚ùå –ê—É–∫—Ü–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        if not auction_data.get("is_active", False):
            return "‚ùå –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω"
        
        if time.time() > auction_data.get("ends_at", 0):
            return "‚ùå –í—Ä–µ–º—è –∞—É–∫—Ü–∏–æ–Ω–∞ –∏—Å—Ç–µ–∫–ª–æ"
        
        if bid_amount <= auction_data.get("current_price", 0):
            return "‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π"
        
        wallet = self.get_wallet(user_id)
        if wallet.balance.get(Currency.CRYCOIN, 0) < bid_amount:
            return "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞—É–∫—Ü–∏–æ–Ω
        auction_data["current_price"] = bid_amount
        auction_data["highest_bidder"] = user_id
        
        self._storage.set("auctions", auction_id, auction_data)
        
        return f"‚úÖ –°—Ç–∞–≤–∫–∞ {bid_amount} ü™ô –ø—Ä–∏–Ω—è—Ç–∞!"
    
    def get_active_auctions(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤"""
        all_auctions = self._storage.get_all("auctions")
        active_auctions = []
        
        for auction_id, auction_data in all_auctions.items():
            if auction_data.get("is_active", False) and time.time() <= auction_data.get("ends_at", 0):
                active_auctions.append((auction_id, auction_data))
        
        if not active_auctions:
            return "üè∑Ô∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –Ω–µ—Ç"
        
        result = "üè∑Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã:\n\n"
        for auction_id, auction_data in active_auctions[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            item = self.shop_items.get(auction_data["item_id"])
            item_name = item.name if item else auction_data["item_id"]
            
            time_left = int(auction_data["ends_at"] - time.time())
            minutes = time_left // 60
            
            result += f"üì¶ {item_name} x{auction_data['quantity']}\n"
            result += f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {auction_data['current_price']} ü™ô\n"
            result += f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: {minutes} –º–∏–Ω\n"
            result += f"üè∑Ô∏è ID: {auction_id}\n\n"
        
        return result
    
    def create_tournament(self, name: str, game_type: str, entry_fee: int, max_participants: int = 16) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞"""
        tournament_id = f"tournament_{int(time.time())}"
        
        tournament = Tournament(
            id=tournament_id,
            name=name,
            game_type=game_type,
            entry_fee=entry_fee,
            prize_pool=entry_fee * max_participants,
            max_participants=max_participants
        )
        
        self.tournaments[tournament_id] = tournament
        
        return f"üèÜ –¢—É—Ä–Ω–∏—Ä —Å–æ–∑–¥–∞–Ω!\n\n–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n–ò–≥—Ä–∞: {game_type}\n–í–∑–Ω–æ—Å: {entry_fee} ü™ô\n–ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥: {tournament.prize_pool} ü™ô\n–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: 0/{max_participants}\n\nID —Ç—É—Ä–Ω–∏—Ä–∞: {tournament_id}"
    
    def join_tournament(self, user_id: int, tournament_id: str) -> str:
        """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Ç—É—Ä–Ω–∏—Ä—É"""
        if tournament_id not in self.tournaments:
            return "‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        tournament = self.tournaments[tournament_id]
        if not tournament.is_active:
            return "‚ùå –¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à—ë–Ω"
        
        if user_id in tournament.participants:
            return "‚ùå –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ"
        
        if len(tournament.participants) >= tournament.max_participants:
            return "‚ùå –¢—É—Ä–Ω–∏—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑–Ω–æ—Å
        wallet = self.get_wallet(user_id)
        if wallet.balance.get(Currency.CRYCOIN, 0) < tournament.entry_fee:
            return f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ {tournament.entry_fee} ü™ô"
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º –≤–∑–Ω–æ—Å
        self.spend_money(user_id, tournament.entry_fee)
        tournament.participants.append(user_id)
        
        return f"‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Ç—É—Ä–Ω–∏—Ä—É '{tournament.name}'!\n–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(tournament.participants)}/{tournament.max_participants}"
    
    def get_tournaments(self) -> str:
        """–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤"""
        active_tournaments = [t for t in self.tournaments.values() if t.is_active]
        
        if not active_tournaments:
            return "üèÜ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –Ω–µ—Ç"
        
        result = "üèÜ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã:\n\n"
        for tournament in active_tournaments[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            result += f"üìã {tournament.name}\n"
            result += f"üéÆ –ò–≥—Ä–∞: {tournament.game_type}\n"
            result += f"üí∞ –í–∑–Ω–æ—Å: {tournament.entry_fee} ü™ô\n"
            result += f"üèÜ –ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥: {tournament.prize_pool} ü™ô\n"
            result += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(tournament.participants)}/{tournament.max_participants}\n"
            result += f"üè∑Ô∏è ID: {tournament.id}\n\n"
        
        return result
    
    def update_leaderboard(self, user_id: int, game_type: str, won: bool, score: int = 0) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏–≥—Ä–æ–∫–∞"""
        if game_type not in self.leaderboards:
            self.leaderboards[game_type] = {}
        
        if user_id not in self.leaderboards[game_type]:
            self.leaderboards[game_type][user_id] = Leaderboard(
                user_id=user_id,
                game_type=game_type,
                score=0,
                wins=0,
                losses=0,
                total_games=0
            )
        
        leaderboard = self.leaderboards[game_type][user_id]
        leaderboard.total_games += 1
        leaderboard.score += score
        
        if won:
            leaderboard.wins += 1
        else:
            leaderboard.losses += 1
        
        leaderboard.last_updated = time.time()
    
    def get_leaderboard(self, game_type: str, limit: int = 10) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ –∏–≥—Ä–µ"""
        if game_type not in self.leaderboards:
            return f"üìä –†–µ–π—Ç–∏–Ω–≥ –ø–æ {game_type} –ø—É—Å—Ç"
        
        players = list(self.leaderboards[game_type].values())
        players.sort(key=lambda x: x.score, reverse=True)
        
        result = f"üìä –†–µ–π—Ç–∏–Ω–≥ –ø–æ {game_type}:\n\n"
        for i, player in enumerate(players[:limit], 1):
            win_rate = (player.wins / player.total_games * 100) if player.total_games > 0 else 0
            result += f"{i}. –ò–≥—Ä–æ–∫ {player.user_id}\n"
            result += f"   –û—á–∫–∏: {player.score} | –ü–æ–±–µ–¥—ã: {player.wins}/{player.total_games} ({win_rate:.1f}%)\n\n"
        
        return result
    
    def daily_bonus(self, user_id: int) -> str:
        wallet = self.get_wallet(user_id)
        now = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 24 —á–∞—Å–∞
        if now - wallet.last_daily < 86400:  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            remaining = int(86400 - (now - wallet.last_daily))
            hours = remaining // 3600
            minutes = (remaining % 3600) // 60
            return f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å —á–µ—Ä–µ–∑ {hours}—á {minutes}–º"
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ç—Ä–∏–∫
        wallet.daily_streak += 1
        wallet.last_daily = now
        
        # –ë–æ–Ω—É—Å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ç—Ä–∏–∫–∞
        base_bonus = 100
        streak_bonus = min(wallet.daily_streak * 10, 200)  # –ú–∞–∫—Å–∏–º—É–º +200 –∑–∞ —Å—Ç—Ä–∏–∫
        total_bonus = base_bonus + streak_bonus
        
        wallet.balance[Currency.CRYCOIN] += total_bonus
        wallet.total_earned += total_bonus
        self._storage.set("wallets", str(user_id), {
            "user_id": user_id,
            "balance": {k.name: v for k, v in wallet.balance.items()},
            "last_daily": wallet.last_daily,
            "daily_streak": wallet.daily_streak,
            "total_earned": wallet.total_earned,
            "total_spent": wallet.total_spent,
        })
        
        return (
            f"üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å!\n"
            f"üí∞ +{total_bonus} ü™ô\n"
            f"üî• –°—Ç—Ä–∏–∫: {wallet.daily_streak} –¥–Ω–µ–π\n"
            f"–ë–∞–ª–∞–Ω—Å: {wallet.balance[Currency.CRYCOIN]} ü™ô"
        )
    
    def buy_item(self, user_id: int, item_id: str) -> str:
        if item_id not in self.shop_items:
            return "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        item = self.shop_items[item_id]
        wallet = self.get_wallet(user_id)
        inventory = self.get_inventory(user_id)
        
        if not self.spend_money(user_id, item.price, item.currency):
            return f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ: {item.price} {item.currency.value}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        if item_id in inventory.items:
            inventory.items[item_id] += item.stack_size
        else:
            inventory.items[item_id] = item.stack_size
        self._storage.set("inventories", str(user_id), {
            "user_id": user_id,
            "items": inventory.items,
            "equipped": inventory.equipped,
        })
        
        return (
            f"‚úÖ –ü–æ–∫—É–ø–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"üéÅ {item.name}\n"
            f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {item.price} {item.currency.value}\n"
            f"üì¶ –í –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ: {inventory.items[item_id]}"
        )
    
    def get_shop(self, category: Optional[str] = None) -> str:
        items = self.shop_items.values()
        if category:
            items = [item for item in items if item.category == category]
        
        if not items:
            return "‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        result = "üõí –ú–∞–≥–∞–∑–∏–Ω:\n\n"
        for item in items:
            rarity_emoji = {"common": "‚ö™", "rare": "üîµ", "epic": "üü£", "legendary": "üü°"}.get(item.rarity, "‚ö™")
            result += (
                f"{rarity_emoji} {item.name}\n"
                f"üìù {item.description}\n"
                f"üí∞ {item.price} {item.currency.value}\n"
                f"‚≠ê {item.rarity.upper()}\n"
                f"üìÇ {item.category}\n\n"
            )
        
        return result


# -------- –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ --------
class RelationshipStatus(Enum):
    SINGLE = "—Ö–æ–ª–æ—Å—Ç"
    DATING = "–≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö"
    MARRIED = "–∂–µ–Ω–∞—Ç/–∑–∞–º—É–∂–µ–º"
    DIVORCED = "–≤ —Ä–∞–∑–≤–æ–¥–µ"


@dataclass
class UserProfile:
    user_id: int
    name: str
    bio: str = ""
    avatar: str = "üë§"
    level: int = 1
    experience: int = 0
    relationship_status: RelationshipStatus = RelationshipStatus.SINGLE
    partner_id: Optional[int] = None
    clan_id: Optional[int] = None
    friends: Set[int] = field(default_factory=set)
    followers: Set[int] = field(default_factory=set)
    following: Set[int] = field(default_factory=set)
    created_at: float = field(default_factory=time.time)
    last_online: float = field(default_factory=time.time)
    preferred_language: str = "ru"


@dataclass
class Clan:
    id: int
    name: str
    description: str
    leader_id: int
    members: Set[int] = field(default_factory=set)
    level: int = 1
    experience: int = 0
    treasury: int = 0
    created_at: float = field(default_factory=time.time)
    is_public: bool = True


@dataclass
class Marriage:
    id: int
    partner1_id: int
    partner2_id: int
    married_at: float
    is_active: bool = True
    divorce_requested_by: Optional[int] = None

@dataclass
class Tournament:
    id: str
    name: str
    game_type: str  # "chess", "poker", "hangman", "crossword"
    entry_fee: int
    prize_pool: int
    max_participants: int
    participants: List[int] = field(default_factory=list)
    start_time: float = field(default_factory=time.time)
    end_time: Optional[float] = None
    is_active: bool = True
    winner_id: Optional[int] = None

@dataclass
class Leaderboard:
    user_id: int
    game_type: str
    score: int
    wins: int
    losses: int
    total_games: int
    last_updated: float = field(default_factory=time.time)

@dataclass
class Achievement:
    id: str
    name: str
    description: str
    icon: str
    condition: str  # "games_won_10", "total_score_1000", etc.
    reward: int  # –º–æ–Ω–µ—Ç—ã –∑–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ
    is_hidden: bool = False

@dataclass
class UserAchievement:
    user_id: int
    achievement_id: str
    unlocked_at: float = field(default_factory=time.time)
    progress: int = 0  # –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π


class SocialManager:
    def __init__(self):
        self.profiles: Dict[int, UserProfile] = {}
        self.clans: Dict[int, Clan] = {}
        self.marriages: Dict[int, Marriage] = {}
        self.clan_counter = 1
        self._storage = get_storage_from_env()
        # –ø–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –∫–ª–∞–Ω–æ–≤ –∏–∑ meta
        meta = self._storage.get("meta", "clan_counter")
        if meta and isinstance(meta.get("value"), int):
            self.clan_counter = int(meta["value"])
    
    def get_profile(self, user_id: int) -> UserProfile:
        if user_id in self.profiles:
            return self.profiles[user_id]
        # –ø—Ä–æ–±—É–µ–º –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        data = self._storage.get("profiles", str(user_id))
        if data:
            p = UserProfile(
                user_id=int(data.get("user_id", user_id)),
                name=str(data.get("name", f"–ò–≥—Ä–æ–∫ {user_id}")),
                bio=str(data.get("bio", "")),
                avatar=str(data.get("avatar", "üë§")),
                level=int(data.get("level", 1)),
                experience=int(data.get("experience", 0)),
                relationship_status=RelationshipStatus[data.get("relationship_status", "SINGLE")],
                partner_id=(int(data["partner_id"]) if data.get("partner_id") is not None else None),
                clan_id=(int(data["clan_id"]) if data.get("clan_id") is not None else None),
                friends=set(int(x) for x in data.get("friends", [])),
                followers=set(int(x) for x in data.get("followers", [])),
                following=set(int(x) for x in data.get("following", [])),
                created_at=float(data.get("created_at", time.time())),
                last_online=float(data.get("last_online", time.time())),
            )
            self.profiles[user_id] = p
            return p
        p = UserProfile(user_id=user_id, name=f"–ò–≥—Ä–æ–∫ {user_id}")
        self.profiles[user_id] = p
        # –ø–µ—Ä–≤–∏—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        self._save_profile(p)
        return p

    def _save_profile(self, profile: UserProfile) -> None:
        self._storage.set("profiles", str(profile.user_id), {
            "user_id": profile.user_id,
            "name": profile.name,
            "bio": profile.bio,
            "avatar": profile.avatar,
            "level": profile.level,
            "experience": profile.experience,
            "relationship_status": profile.relationship_status.name,
            "partner_id": profile.partner_id,
            "clan_id": profile.clan_id,
            "friends": list(profile.friends),
            "followers": list(profile.followers),
            "following": list(profile.following),
            "created_at": profile.created_at,
            "last_online": profile.last_online,
        })
    
    def update_profile(self, user_id: int, **kwargs) -> str:
        profile = self.get_profile(user_id)
        
        for key, value in kwargs.items():
            if hasattr(profile, key):
                setattr(profile, key, value)
        
        profile.last_online = time.time()
        self._save_profile(profile)
        return "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω"
    
    def add_friend(self, user_id: int, friend_id: int) -> str:
        if user_id == friend_id:
            return "‚ùå –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è –≤ –¥—Ä—É–∑—å—è"
        
        profile = self.get_profile(user_id)
        friend_profile = self.get_profile(friend_id)
        
        if friend_id in profile.friends:
            return "‚ùå –£–∂–µ –≤ –¥—Ä—É–∑—å—è—Ö"
        
        profile.friends.add(friend_id)
        friend_profile.followers.add(user_id)
        self._save_profile(profile)
        self._save_profile(friend_profile)
        return f"‚úÖ {friend_profile.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥—Ä—É–∑—å—è"
    
    def remove_friend(self, user_id: int, friend_id: int) -> str:
        profile = self.get_profile(user_id)
        friend_profile = self.get_profile(friend_id)
        
        if friend_id not in profile.friends:
            return "‚ùå –ù–µ –≤ –¥—Ä—É–∑—å—è—Ö"
        
        profile.friends.discard(friend_id)
        friend_profile.followers.discard(user_id)
        self._save_profile(profile)
        self._save_profile(friend_profile)
        return f"‚ùå {friend_profile.name} —É–¥–∞–ª—ë–Ω –∏–∑ –¥—Ä—É–∑–µ–π"
    
    def create_clan(self, user_id: int, name: str, description: str) -> str:
        profile = self.get_profile(user_id)
        
        if profile.clan_id:
            return "‚ùå –í—ã —É–∂–µ –≤ –∫–ª–∞–Ω–µ"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏
        for clan in self.clans.values():
            if clan.name.lower() == name.lower():
                return "‚ùå –ö–ª–∞–Ω —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        
        clan_id = self.clan_counter
        self.clan_counter += 1
        
        clan = Clan(
            id=clan_id,
            name=name,
            description=description,
            leader_id=user_id
        )
        clan.members.add(user_id)
        
        self.clans[clan_id] = clan
        profile.clan_id = clan_id
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        self._save_profile(profile)
        self._storage.set("clans", str(clan_id), {
            "id": clan_id,
            "name": clan.name,
            "description": clan.description,
            "leader_id": clan.leader_id,
            "members": list(clan.members),
            "level": clan.level,
            "experience": clan.experience,
            "treasury": clan.treasury,
            "created_at": clan.created_at,
            "is_public": clan.is_public,
        })
        self.clan_counter += 1
        self._storage.set("meta", "clan_counter", {"value": self.clan_counter})
        
        return (
            f"üè∞ –ö–ª–∞–Ω '{name}' —Å–æ–∑–¥–∞–Ω!\n"
            f"üëë –õ–∏–¥–µ—Ä: {profile.name}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}"
        )
    
    def join_clan(self, user_id: int, clan_id: int) -> str:
        if clan_id not in self.clans:
            return "‚ùå –ö–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        profile = self.get_profile(user_id)
        clan = self.clans[clan_id]
        
        if profile.clan_id:
            return "‚ùå –í—ã —É–∂–µ –≤ –∫–ª–∞–Ω–µ"
        
        if not clan.is_public:
            return "‚ùå –ö–ª–∞–Ω –∑–∞–∫—Ä—ã—Ç –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è"
        
        clan.members.add(user_id)
        profile.clan_id = clan_id
        self._save_profile(profile)
        self._storage.set("clans", str(clan_id), {
            "id": clan.id,
            "name": clan.name,
            "description": clan.description,
            "leader_id": clan.leader_id,
            "members": list(clan.members),
            "level": clan.level,
            "experience": clan.experience,
            "treasury": clan.treasury,
            "created_at": clan.created_at,
            "is_public": clan.is_public,
        })
        return f"‚úÖ –í—ã –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –∫–ª–∞–Ω '{clan.name}'"
    
    def leave_clan(self, user_id: int) -> str:
        profile = self.get_profile(user_id)
        
        if not profile.clan_id:
            return "‚ùå –í—ã –Ω–µ –≤ –∫–ª–∞–Ω–µ"
        
        clan = self.clans[profile.clan_id]
        
        if clan.leader_id == user_id:
            return "‚ùå –õ–∏–¥–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫–∏–Ω—É—Ç—å –∫–ª–∞–Ω. –ü–µ—Ä–µ–¥–∞–π—Ç–µ –ª–∏–¥–µ—Ä—Å—Ç–≤–æ –∏–ª–∏ —Ä–∞—Å–ø—É—Å—Ç–∏—Ç–µ –∫–ª–∞–Ω"
        
        clan.members.discard(user_id)
        profile.clan_id = None
        self._save_profile(profile)
        self._storage.set("clans", str(clan.id), {
            "id": clan.id,
            "name": clan.name,
            "description": clan.description,
            "leader_id": clan.leader_id,
            "members": list(clan.members),
            "level": clan.level,
            "experience": clan.experience,
            "treasury": clan.treasury,
            "created_at": clan.created_at,
            "is_public": clan.is_public,
        })
        return f"‚úÖ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∫–ª–∞–Ω '{clan.name}'"
    
    def propose_marriage(self, user_id: int, partner_id: int) -> str:
        if user_id == partner_id:
            return "‚ùå –ù–µ–ª—å–∑—è –∂–µ–Ω–∏—Ç—å—Å—è –Ω–∞ —Å–µ–±–µ"
        
        profile = self.get_profile(user_id)
        partner_profile = self.get_profile(partner_id)
        
        if profile.relationship_status != RelationshipStatus.SINGLE:
            return "‚ùå –í—ã —É–∂–µ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö"
        
        if partner_profile.relationship_status != RelationshipStatus.SINGLE:
            return f"‚ùå {partner_profile.name} —É–∂–µ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö"
        
        # –°–æ–∑–¥–∞—ë–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        marriage_id = len(self.marriages) + 1
        marriage = Marriage(
            id=marriage_id,
            partner1_id=user_id,
            partner2_id=partner_id,
            married_at=time.time()
        )
        
        self.marriages[marriage_id] = marriage
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
        profile.relationship_status = RelationshipStatus.MARRIED
        profile.partner_id = partner_id
        partner_profile.relationship_status = RelationshipStatus.MARRIED
        partner_profile.partner_id = user_id
        self._save_profile(profile)
        self._save_profile(partner_profile)
        self._storage.set("marriages", str(marriage_id), {
            "id": marriage.id,
            "partner1_id": marriage.partner1_id,
            "partner2_id": marriage.partner2_id,
            "married_at": marriage.married_at,
            "is_active": marriage.is_active,
            "divorce_requested_by": marriage.divorce_requested_by,
        })
        
        return (
            f"üíç –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –±—Ä–∞–∫–æ–º!\n"
            f"üë∞ {profile.name} –∏ ü§µ {partner_profile.name}\n"
            f"üíï –¢–µ–ø–µ—Ä—å –≤—ã –º—É–∂ –∏ –∂–µ–Ω–∞!"
        )
    
    def request_divorce(self, user_id: int) -> str:
        profile = self.get_profile(user_id)
        
        if profile.relationship_status != RelationshipStatus.MARRIED:
            return "‚ùå –í—ã –Ω–µ –∂–µ–Ω–∞—Ç—ã"
        
        # –ù–∞—Ö–æ–¥–∏–º –±—Ä–∞–∫
        for marriage in self.marriages.values():
            if (marriage.partner1_id == user_id or marriage.partner2_id == user_id) and marriage.is_active:
                if marriage.divorce_requested_by:
                    if marriage.divorce_requested_by == user_id:
                        return "‚ùå –í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ä–∞–∑–≤–æ–¥"
                    else:
                        # –í—Ç–æ—Ä–æ–π –ø–∞—Ä—Ç–Ω—ë—Ä —Ç–æ–∂–µ —Ö–æ—á–µ—Ç —Ä–∞–∑–≤–æ–¥
                        return self._process_divorce(marriage)
                else:
                    marriage.divorce_requested_by = user_id
                    return "üìù –ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ä–∞–∑–≤–æ–¥ –ø–æ–¥–∞–Ω–æ. –ü–∞—Ä—Ç–Ω—ë—Ä –¥–æ–ª–∂–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
        
        return "‚ùå –ë—Ä–∞–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    def _process_divorce(self, marriage: Marriage) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–≤–æ–¥–∞"""
        marriage.is_active = False
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª–∏
        partner1 = self.get_profile(marriage.partner1_id)
        partner2 = self.get_profile(marriage.partner2_id)
        
        partner1.relationship_status = RelationshipStatus.DIVORCED
        partner1.partner_id = None
        partner2.relationship_status = RelationshipStatus.DIVORCED
        partner2.partner_id = None
        self._save_profile(partner1)
        self._save_profile(partner2)
        self._storage.set("marriages", str(marriage.id), {
            "id": marriage.id,
            "partner1_id": marriage.partner1_id,
            "partner2_id": marriage.partner2_id,
            "married_at": marriage.married_at,
            "is_active": marriage.is_active,
            "divorce_requested_by": marriage.divorce_requested_by,
        })
        
        return "üíî –†–∞–∑–≤–æ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω"


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
economy_manager = EconomyManager()
social_manager = SocialManager()