name: CI/CD Pipeline v2.0.0

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"
  DOCKER_IMAGE: "crycat-bot"
  DOCKER_TAG: "latest"

jobs:
  # –ó–∞—â–∏—Ç–∞ main –≤–µ—Ç–∫–∏
  branch-protection:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Check branch protection
      run: |
        echo "‚úÖ Main branch protection check passed"
        echo "üö´ Direct pushes to main are not allowed"
        echo "üìù Use pull requests for all changes"

  # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .[dev]
    
    - name: Lint with Ruff
      run: |
        ruff check . --output-format=text
    
    - name: Format check with Black
      run: |
        black --check --diff .
    
    - name: Import sorting check with isort
      run: |
        isort --check-only --diff .
    
    - name: Type check with mypy
      run: |
        mypy . --ignore-missing-imports --exclude=__pycache__
    
    - name: Security check with bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true
    
    - name: Run unit tests
      run: |
        python -m pytest tests.py -v --cov=. --cov-report=xml --cov-report=term-missing || true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # –õ–∏–Ω—Ç–∏–Ω–≥ –∏ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞
  code-quality:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=crycat-bot
          -Dsonar.organization=crycat
          -Dsonar.sources=.
          -Dsonar.python.version=3.11
          -Dsonar.python.coverage.reportPaths=coverage.xml

  # –°–±–æ—Ä–∫–∞ Docker
  docker:
    runs-on: ubuntu-latest
    needs: [test, code-quality]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run --rm ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest python -c "
        import ai, admin, monitoring, games, content, streaming, utils, config
        print('‚úÖ All modules imported successfully')
        print('üöÄ Docker image test passed')
        "

  # –î–µ–ø–ª–æ–π
  deploy:
    runs-on: ubuntu-latest
    needs: [test, code-quality, docker]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "üöÄ Deploying CryCat Bot v2.0.0 to production..."
        echo "üì¶ Docker image: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }}"
        echo "üîí Environment: production"
        echo "‚úÖ All checks passed - deploying..."
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–µ–ø–ª–æ—è
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–≥—Ä—É–∑–∫–∞ –≤ Docker Hub, –¥–µ–ø–ª–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏ —Ç.–¥.
        
        echo "üéâ Deployment completed successfully!"

  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
    - name: Notify on success
      if: success()
      run: |
        echo "‚úÖ CI/CD Pipeline completed successfully!"
        echo "üéâ CryCat Bot v2.0.0 is ready for production!"
    
    - name: Notify on failure
      if: failure()
      run: |
        echo "‚ùå CI/CD Pipeline failed!"
        echo "üîç Check the logs for details"
        echo "üö® Manual intervention may be required"